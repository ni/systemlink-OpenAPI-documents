swagger: '2.0'
info:
  version: '1'
  title: Tag Rule Engine Web Service
  description: SystemLink Tag Rule Engine Service HTTP API. Only available on SystemLink Server.
  contact:
    name: NI
    url: 'https://www.ni.com/systemlink'
externalDocs:
  description: Technical Support
  url: https://ni.com/support
basePath: /nitagrule
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  apiKeyAuth:
    type: apiKey
    name: x-ni-api-key
    in: header        
  basicAuth:
    type: basic
security:
  - apiKeyAuth: []        
  - basicAuth: []
x-ni-routing-key: Skyline.TagRuleEngine
definitions:
  Error:
    description: Contains error information
    type: object
    properties:
      name:
        description: String error code
        type: string
      code:
        description: Numeric error code
        type: integer
      message:
        description: Complete error message
        type: string
      args:
        description: Positional argument values for the error code
        type: array
        items:
          type: string
      resourceType:
        description: Type of resource associated with the error.
          This field is only present for entries in *innerErrors*.
        type: string
        enum: [tagRule]
      resourceId:
        description: Identifier of the resource associated with the error.
          This field is only present for entries in *innerErrors*.
        type: string
      innerErrors:
        description: Array of individual errors when a request results in multiple errors.
          This field is only present when *name* is 'Skyline.OneOrMoreErrorsOccurred'.
        type: array
        items:
          $ref: '#/definitions/Error'
    example:
      name: Skyline.OneOrMoreErrorsOccurred
      code: -251041
      message: One or more errors occurred. See the contained list for details of each error.
      args: []
      innerErrors:
        - name: TagRuleEngine.RuleNotFound
          code: -253103
          message: A rule with ID '5c2cf7e0e0d64403b486fcb4' was not found.
          resourceType: tagRule
          resourceId: 5c2cf7e0e0d64403b486fcb4
          args: [5c2cf7e0e0d64403b486fcb4]
  Operation:
    description: Operation provided by the API
    type: object
    properties:
      available:
        type: boolean
        description: Whether the operation is available to the caller
      version:
        type: integer
        description: Version of the available operation
    required: [available]
    example:
      available: true
      version: 1
  V1Operations:
    title: V1 Operations
    description: V1 operations
    type: object
    properties:
      operations:
        description: >-
          Available operations in the v1 version of the API:

          - deleteRules: The ability to delete tag alarm rules

          - readRules: The ability to query for tag alarm rules

          - writeRules: The ability to create and modify tag alarm rules

        type: object
        properties:
          deleteRules:
            $ref: '#/definitions/Operation'
          readRules:
            $ref: '#/definitions/Operation'
          writeRules:
            $ref: '#/definitions/Operation'
  Condition:
    title: Condition
    description: An object describing the circumstances under which an alarm should be created.
    type: object
    required:
      - setPoints
      - comparator
    properties:
      setPoints:
        description: Values compared against the tag's current value to determine whether or not the condition
          is true. Conditions associated with the IN_RANGE and OUT_OF_RANGE comparators will have two set
          points. All other conditions should have only one set point. For tags of the DATE_TIME type, a timespan
          (for example, "01:00:00") is a valid value and represents a time interval relative to the server's current
          time when the rule is evaluated. Positive timespans represent times in the future, and negative timespans
          represent times in the past. The expected timespan format is `[-]d.hh:mm:ss.ff`.
        type: array
        items:
          type: string
        example: ["10"]
      comparator:
          type: string
          description: Operator which will be used when comparing the tag's current value to the set point(s).
            Note that the CONTAINS and NOT_CONTAINS comparators are only valid for rules associated with
            string tags. Similarly, LESS_THAN, GREATER_THAN, IN_RANGE, and the other numeric comparators are 
            not valid for rules associated with string tags.
          enum: [LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, IN_RANGE, OUT_OF_RANGE,
            EQUAL, NOT_EQUAL, CONTAINS, NOT_CONTAINS]  
      deadband:
        description: The change in signal from the set point necessary to clear an alarm. For example, a
          condition with a set point of 10, a comparator of GREATER_THAN, and a deadband of 2 will request 
          that alarms be cleared if the tag's values is less than or equal to (10 - 2) = 8. Similarly, if the
          condition had a comparator of LESS_THAN, the condition would request that alarms be cleared if the
          tag's value is greater than or equal to (10 + 2) = 12.
        type: string
        example: '2'
      severityLevel:
        description: An integer in the range [1,4] which specifies the severity level of a condition.
          Higher numeric values correspond to higher severity levels.
        type: integer
        minimum: 1
        maximum: 4
        example: 2
        default: 2
      notificationStrategyIds:
        description: The IDs of the notification strategies which should be triggered if a condition
          results in alarms being created or increasing in severity.
        type: array
        items:
          type: string
        example: []
  TagDataType:
    title: Tag Data Type
    description: The data type of the tags which a rule applies to. Rules are only evaluated
      against tags whose data type matches their *tagDataType*. For the TAG_TIME type, rules are
      evaluated against a tag's last updated time rather than its value. These rules will match tags
      of any data type.
    type: string
    enum: [DOUBLE, INT, STRING, BOOLEAN, U_INT64, DATE_TIME, TAG_TIME]
    example: DOUBLE
  Conditions:
    description: Array containing one or more conditions which control when a rule creates or clears alarms.
    type: array
    items:
      $ref: '#/definitions/Condition'
  Keywords:
    description: Words or phrases associated with a rule. Rules can be tagged with keywords to make it easier
      to find them with queries.
    type: array
    items:
      type: string
    example:
      - keyword1
      - keyword2
  Properties:
    description: Key-value-pair metadata associated with a rule. Rules can be tagged with properties to make
      it easier to find them with queries.
    type: object
    additionalProperties:
      type: string
    example:
      key1: value1
  RuleCommonFields:
    title: Rule Common Fields
    description: A single-sourced definition of available fields in both an update request and the rule type
      itself.
    properties:
      searchPath:
        description: A string describing which tag(s) a rule applies to. This can take the form of either
          a single tag's path, or a string containing wildcard characters which can match multiple tags.
        type: string
        example: '*.System.Health.DiskUsePercentage'
      workspace:
        description: The ID of the workspace to which this rule belongs. Added in version 2 of the
          readRules operation.
        type: string
        example: 3d411024-9db8-42d1-8ab8-6cee0e6cd841
      tagDataType:
        $ref: '#/definitions/TagDataType'
      conditions:
        $ref: '#/definitions/Conditions'
      disabled:
        description: A value indicating whether or not a rule is disabled.
        type: boolean
        example: false
        default: false
      displayName:
        description: Display string for a rule's name.
        type: string
        example: Low Disk Space Rule
      description:
        description: Display string for a rule's description.
        type: string
        example: Preconfigured rule for monitoring managed system's disk space
      alarmInstanceDisplayNameTemplate:
        description: Template string which will be used to set the *displayName* field on alarms created
          by a rule. Values surrounded by angle brackets will be substituted with values from the tag's property
          dictionary. For example, if an *alarmInstanceDisplayNameTemplate* contained the string "Excessive vibration
          on turbine <turbine_number>", and the rule was evaluated against a tag whose property dictionary
          contained the key "turbine_number" with value "5", then the rule would request that an alarm with 
          display name "Excessive vibration on turbine 5" be created.
        example: Excessive vibration on turbine <turbine_number>
        type: string
      alarmInstanceDescriptionTemplate:
        description: Template string which will be used to set the *description* field on alarms created by a rule.
          Values surrounded by angle brackets will be substituted with values from the tag's property dictionary.
          See the description of AlarmInstanceDisplayNameTemplate for more information.
        example: Disk space on <system> is low. Disk usage was <value>% when this alarm was triggered.
        type: string
      keywords:
        $ref: '#/definitions/Keywords'
      properties:
        $ref: '#/definitions/Properties'
  Rule:
    title: Rule
    description: A rule which contains one or more conditions which will be evaluated against updates
      to tags matched by the rule's searchPath.
    allOf:
     - type: object
       properties:
          id:
            description: The unique ID of a particular rule.
            type: string
            example: 5c33c212e0d6444320d9a9f4
     - $ref: '#/definitions/RuleCommonFields'
responses:
  Error:
    description: Error
    schema:
      description: Error response
      title: ErrorResponse
      type: object
      properties:
        error:
          $ref: '#/definitions/Error'
  Unauthorized:
    description: Not authorized
    headers:
      WWW_Authenticate:
        description: Information for how to authenticate
        type: string
paths:
  /:
    get:
      tags: [versioning]
      summary: API information
      description: Returns information about API versions and available operations.
      operationId: RootEndpoint
      # Explicitly mark security as an empty array - this route does not require any privileges.
      # Marking it this way prevents it from inheriting the top-level security settings.
      security: []
      responses:
        200:
          description: OK
          schema:
            description: Version information
            title: RootEndpointResponse
            type: object
            properties:
              v1:
                $ref: '#/definitions/V1Operations'
              version:
                description: Implementation version of the web service
                type: string
                example: 18.0
  /{version}:
    parameters:
      - in: path
        name: version
        description: Version of the API to retrieve operations.
        type: string
        required: true
    get:
      tags: [versioning]
      summary: API version information
      description: Returns available operations for a single version of the API.
      operationId: RootEndpointWithVersion
      # Explicitly mark security as an empty array - this route does not require any privileges.
      # Marking it this way prevents it from inheriting the top-level security settings.
      security: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/V1Operations'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
  /v1/rules:
    post:
      tags: [rules]
      summary: Create a rule
      description: Creates a rule.
      operationId: CreateRule
      x-ni-operation: writeRules
      parameters:
        - in: body
          name: Request body
          required: true
          schema:
            type: object
            title: CreateRuleRequestBody
            required:
              - searchPath
              - tagDataType
              - conditions
            properties:
              searchPath:
                description: A string describing which tag(s) a rule applies to. This can take the form of either
                  a single tag's path, or a string containing wildcard characters which can match multiple tags.
                type: string
                example: '*.System.Health.DiskUsePercentage'
              workspace:
                description: The ID of the workspace in which to create or update the rule. When not specified,
                  the default workspace is used based on the requesting user. Added in version 2 of the
                  writeRules operation.
                type: string
                example: 3d411024-9db8-42d1-8ab8-6cee0e6cd841
              tagDataType:
                $ref: '#/definitions/TagDataType'
              conditions:
                $ref: '#/definitions/Conditions'
              disabled:
                description: A value indicating whether or not a rule is disabled.
                type: boolean
                example: false
                default: false
              displayName:
                description: Display string for a rule's name.
                type: string
                example: Low Disk Space Rule
              description:
                description: Display string for a rule's description.
                type: string
                example: Preconfigured rule for monitoring managed system's disk space
              alarmInstanceDisplayNameTemplate:
                description: Template string which will be used to set the *displayName* field on alarms created
                  by a rule. Values surrounded by angle brackets will be substituted with values from the tag's property
                  dictionary. For example, if an *alarmInstanceDisplayNameTemplate* contained the string "Excessive vibration
                  on turbine <turbine_number>", and the rule was evaluated against a tag whose property dictionary
                  contained the key "turbine_number" with value "5", then the rule would request that an alarm with 
                  display name "Excessive vibration on turbine 5" be created.
                example: Excessive vibration on turbine <turbine_number>
                type: string
              alarmInstanceDescriptionTemplate:
                description: Template string which will be used to set the *description* field on alarms created by a rule.
                  Values surrounded by angle brackets will be substituted with values from the tag's property dictionary.
                  See the description of AlarmInstanceDisplayNameTemplate for more information.
                example: Disk space on <system> is low. Disk usage was <value>% when this alarm was triggered.
                type: string
              keywords:
                $ref: '#/definitions/Keywords'
              properties:
                $ref: '#/definitions/Properties'
      responses:
        200:
          description: OK
          schema:
            type: object
            title: CreateRuleResponse
            properties:
              id:
                description: The unique ID of the created rule
                type: string
                example: 5c40ec55e0d6441168b4c543
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/rules/{id}:
    parameters:
      - in: path
        name: id
        description: Rule ID
        type: string
        required: true
    get:
      tags: [rules]
      summary: Get a rule
      description: Gets a rule by ID.
      operationId: GetRule
      x-ni-operation: readRules
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Rule'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
    delete:
      tags: [rules]
      summary: Delete a rule
      description: Deletes a rule by ID.
      operationId: DeleteRule
      x-ni-operation: deleteRules
      responses:
        204:
          description: No Content
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
    patch:
      tags: [rules]
      summary: Modify a rule
      description: Modifies a rule. All fields specified will have their values replaced with the given values.
      operationId: ModifyRule
      x-ni-operation: writeRules
      consumes:
        - application/merge-patch+json
      parameters:
        - in: body
          name: Request body
          required: true
          schema:
            $ref: '#/definitions/RuleCommonFields'
      responses:
        204:
          description: No Content
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/delete-rules:
    post:
      tags: [rules]
      summary: Delete rules
      description: Deletes multiple rules.
      operationId: DeleteRules
      x-ni-operation: deleteRules
      parameters:
        - in: body
          name: Request body
          required: true
          schema:
            title: DeleteRequestBody
            type: object
            required:
              - ids
            properties:
              ids:
                description: The IDs of the rules which should be deleted.
                type: array
                items:
                  type: string
                example: [5c40ec55e0d6441168b4c543, 5c40ec55e0d6441168b4c543]
      responses:
        200:
            description: Partial Success - Indicates the request to delete was processed successfully,
              but one or more rules failed to delete. The included *error* object will contain
              an entry in the *innerErrors* array for each failed rule.
            schema:
              type: object
              title: DeleteRulesPartialSuccess
              properties:
                deleted:
                  description: The *ruleId*s of the rules that were successfully deleted.
                  type: array
                  items:
                    type: string
                  example:
                    - 5c33c212e0d6444320d9a9f4
                failed:
                  description: The *ruleId*s of the rules that were not deleted.
                    See *error* for why each rule failed to delete. Reasons include the
                    rule could not be found or the caller is not authorized to delete the rule.
                  type: array
                  items:
                    type: string
                  example:
                    - 5c2cf7e0e0d64403b486fcb4
                error:
                  $ref: '#/definitions/Error'
        204:
          description: Success - Indicated all requested rules were deleted successfully.
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/toggle-rules:
    post:
      tags: [rules]
      summary: Toggle rules
      description: Enables or disables multiple rules.
      operationId: ToggleRules
      x-ni-operation: writeRules
      parameters:
        - in: body
          name: Request body
          required: true
          schema:
            title: ToggleRequestBody
            type: object
            required:
              - ids
              - disabled
            properties:
              ids:
                description: The IDs of the rules which should be toggled.
                type: array
                items:
                  type: string
                example: [5c40ec55e0d6441168b4c543, 5c40ec55e0d6441168b4c543]
              disabled:
                description: A value indicating whether or not a rule is disabled.
                type: boolean
                example: false
                default: false
      responses:
        200:
          description: OK
          schema:
            title: ToggleResponse
            type: object
            properties:
              toggled:
                description: The IDs of the rules which were toggled.
                type: array
                items:
                  type: string
                example: [5c40ec55e0d6441168b4c543, 5c40ec55e0d6441168b4c544]
              notFoundIds:
                description: The IDs of the rules which were not found.
                type: array
                items:
                  type: string
                example: [5c40ec55e0d6441168b4c541]
              error:
                $ref: '#/definitions/Error'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/query-rules:
    post:
      tags: [rules]
      summary: Query rules
      description: Queries for rules.
      operationId: QueryRules
      x-ni-operation: readRules
      parameters:
        - in: body
          name: Request body
          required: true
          schema:
            title: QueryRequestBody
            type: object
            properties:
              displayName:
                description: Display name query. Returns rules whose *displayName* fields contain the query
                  string, without taking case into account.
                type: string
                example: low disk space
              description:
                description: Description query. Returns rules whose *description* fields contain the query
                  string, without taking case into account.
                type: string
                example: turbine 5
              tagPath:
                description: Tag path query. If the query string contains wildcard characters, the service
                  will return rules whose *searchPaths* either intersect with, or are matched by, the query
                  string. For example, if the query string is CRIO1.System.Health.*, then the service would
                  return rules with search paths of CRIO1.System.Health.Foo and
                  *.System.Health.DiskUsePercentage. The former is matched by the query string, and the latter
                  intersects with the query string, as there exists a string which could be matched by both
                  expressions (such as CRIO1.System.Health.DiskUsePercentage). If the query string does not
                  contain wildcard characters, the service will return rules whose *searchPaths* match the
                  query string.
                type: string
                example: System1.System.Health.DiskUsePercentage
              properties:
                type: object
                description: Property query. The service will return rules whose *properties* fields
                  contain all of the specified key/value pairs.
                additionalProperties:
                  type: string
                example:
                  key1: value1
              keywords:
                type: array
                description: Keyword query. The service will return rules whose *keywords* fields contain
                  all of the specified keywords.
                items:
                  type: string
                example:
                  - keyword1
                  - keyword2
              workspaces:
                type: array
                description: Workspace query. The service will return rules whose *workspace* field is one of
                  the specified workspaces. Added in version 2 of the readRules operation.
                items:
                  type: string
                example:
                  - '*'    
              skip:
                description: Number of entries to skip in the response list. Typically used in combination
                  with the take parameter to implement pagination.
                type: integer
                default: 0
              take:
                description: Number of entries to include in the response list. Typically used in combination
                  with the skip parameter to implement pagination.
                type: integer
                default: 10000
                maximum: 10000
      responses:
        200:
          description: OK
          schema:
            title: QueryResponse
            type: object
            properties:
              rules:
                description: The rules matched by the filter criteria in the request body.
                type: array
                items:
                  $ref: '#/definitions/Rule'
              totalCount:
                description: The total number of rules which matched the filter criteria.
                type: integer
                example: 1
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/duplicate-rules:
    post:
      tags: [rules]
      summary: Duplicate rules
      description: Duplicates multiple rules into a given workspace
      operationId: DuplicateRules
      x-ni-operation: writeRules
      parameters:
        - in: body
          name: Request body
          required: true
          schema:
            title: DuplicateRequestBody
            type: object
            required:
              - ids
              - workspace
            properties:
              ids:
                description: The IDs of the rules which should be duplicated.
                type: array
                items:
                  type: string
                example: [5c40ec55e0d6441168b4c543, 5c40ec55e0d6441168b4c543]
              workspace:
                description: The ID of the workspace in which to duplicate the specified rules.
                type: string
                example: 3d411024-9db8-42d1-8ab8-6cee0e6cd841
      responses:
        200:
          description: OK
          schema:
            title: DuplicateResponse
            type: object
            properties:
              duplicatedIds:
                description: A dictionary where the keys are the IDs of the rules which were successfully
                  duplicated, and the values are the IDs of the new duplicate rules.
                type: object
                additionalProperties:
                  type: string
                example: 
                  5c40ec55e0d6441168b4c543: 5c40ec55e0d6441168b4c545
                  5c40ec55e0d6441168b4c544: 5c40ec55e0d6441168b4c546
              failed:
                description: The IDs of the rules which were failed to be duplicated.
                  See *error* for why each rule failed to duplicate. Reasons include the
                  rule could not be found or the caller is not authorized to create the rule.
                type: array
                items:
                  type: string
                example: [5c40ec55e0d6441168b4c541]
              error:
                $ref: '#/definitions/Error'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
