swagger: "2.0"
info:
  version: '1'
  title: Asset Performance Management Web Service
  description: Asset Performance Management HTTP API
  contact:
    name: National Instruments
    url: 'https://www.ni.com/systemlink'
    email: support@ni.com
basePath: /niapm
x-ni-privilege-application: 'niws.niasset'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  apiKeyAuth:
    type: apiKey
    name: x-ni-api-key
    in: header
  basicAuth:
    type: basic
  cookieAuth:
    type: apiKey
    in: header
    name: Cookie
security:
  - apiKeyAuth: []
  - basicAuth: []
  - cookieAuth: []
x-ni-routing-key: Skyline.AssetPerformanceManagement
definitions:
  Error:
    description: Contains error information.
    type: object
    properties:
      name:
        description: String error code
        type: string
      code:
        description: Numeric error code
        type: integer
      resourceType:
        description: Type of resource associated with the error
        type: string
      resourceId:
        description: Identifier of the resource associated with the error
        type: string
      message:
        description: Complete error message
        type: string
      args:
        description: Positional argument values for the error code
        type: array
        items:
          type: string
      innerErrors:
        type: array
        items:
          $ref: '#/definitions/Error'
    example:
      name: Skyline.OneOrMoreErrorsOccurred
      code: -251040
      message: >-
        One or more errors occurred. See the contained list for details of each
        error.
      args: []
      innerErrors:
        - name: AssetPerformanceManagement.NonExistingAssetWithIdentifier
          code: -253426
          resourceType: AssetEntry
          resourceId: 29162;01B245D6;4243;0
          message: 'No asset found with the specified identifier: 29162;01B245D6;4243;0.'
          args: [29162;01B245D6;4243;0]
  Operation:
    description: An operation provided by the API.
    type: object
    properties:
      available:
        type: boolean
        description: Whether the operation is available to the caller.
      version:
        type: integer
        description: Version of the available operation.
    required: [available]
    example:
      available: true
      version: 1
  V1Operations:
    title: V1 Operations
    description: Object containing available operations in the v1 version of the API.
    type: object
    properties:
      operations:
        description: >-
          Available operations in the v1 version of the API:

          - readAssets: Read information related to assets.

          - writeAssets: Write information related to assets.

          - deleteAssets: Delete information related to assets.
        type: object
        properties:
          readAssets:
            $ref: '#/definitions/Operation'
          writeAssets:
            $ref: '#/definitions/Operation'
          deleteAssets:
            $ref: '#/definitions/Operation'
  DiscoveryType:
    title: Discovery Type
    description: Indicates how the asset was discovered. "Automatic" indicates that SystemLink discovered the asset. "Manual" indicates that the asset was discovered using other methods.
    type: string
    enum:
      - Manual
      - Automatic
  BusType:
    title: Bus Type
    description: All supported bus types for an asset.
    type: string
    enum:
      - BUILT_IN_SYSTEM
      - PCI_PXI
      - USB
      - GPIB
      - VXI
      - SERIAL
      - TCP_IP
      - CRIO
      - SCXI
      - CDAQ
      - SWITCH_BLOCK
      - SCC
      - FIRE_WIRE
      - ACCESSORY
      - CAN
      - SWITCH_BLOCK_DEVICE
  AssetType:
    title: Asset Type
    description: All supported asset types.
    type: string
    enum:
      - GENERIC
      - DEVICE_UNDER_TEST
      - FIXTURE
      - SYSTEM
  SystemConnectionStatus:
    title: System Connection Status
    description: Whether or not the minion is connected to the server and has updated the server with its data.
    type: string
    enum:
      - APPROVED
      - DISCONNECTED
      - CONNECTED_UPDATE_PENDING
      - CONNECTED_UPDATE_SUCCESSFUL
      - CONNECTED_UPDATE_FAILED
      - UNSUPPORTED
      - ACTIVATED
  AssetPresenceStatus:
    title: Asset Presence Status
    description: The status of an asset's presence in a system.
    type: string
    default: NOT_PRESENT
    enum:
      - INITIALIZING
      - UNKNOWN
      - NOT_PRESENT
      - PRESENT
  AssetPresenceUpdateStatus:
    title: Asset Presence Update Status
    description: The status update of an asset's presence in a system.
    type: string
    default: NOT_PRESENT
    enum:
      - INITIALIZING
      - UNKNOWN
      - NOT_PRESENT
      - PRESENT
      - REMOVED
  CalibrationHistoryModel:
    title: Calibration History
    description: The calibration history for an asset.
    allOf:
      - $ref: '#/definitions/ExternalCalibrationModel'
      - type: object
        required:
        - id
        - calibrationType
        properties:
          id:
            description: The calibration entry identifier.
            type: string
            example: "5c4f0834174ae321b8a95a03"
          calibrationType:
            $ref: '#/definitions/CalibrationType'
          timestamp:
            description: ISO-8601 formatted timestamp specifying the creation date of the entry.
            type: string
            format: date-time
            example: '2018-05-07T18:58:05.219692Z'
        example:
          temperatureSensors: [
            { name: 'Sensor0' , reading: 25.7 }
          ]
          isLimited: false
          date: '2018-05-07T18:58:05.000Z'
          recommendedInterval: 12
          nextRecommendedDate: '2019-05-07T18:58:05.000Z'
          nextCustomDueDate: '2019-06-07T18:58:05.000Z'
          comments: 'This is a comment.'
          entryType: MANUAL
          operator:
            displayName: John Doe
            userId: johnDoe2020
          id: 5c4f0834174ae321b8a95a03
          calibrationType: EXTERNAL_CALIBRATION
          timestamp: '2018-05-07T18:58:05.219692Z'
  CalibrationStatus:
    title: Calibration Status
    description: The calibration category the asset belongs to based on the next due calibration date.
    type: string
    enum:
      - OK
      - APPROACHING_RECOMMENDED_DUE_DATE
      - PAST_RECOMMENDED_DUE_DATE
  CalibrationMode:
    title: Calibration Mode
    description: Whether SystemLink automatically discovered the calibration data for an asset or if it was manually entered.
    type: string
    enum:
      - AUTOMATIC
      - MANUAL
  CalibrationType:
    title: Calibration Type
    description: The type of calibration the asset received, such as self or external calibration.
    type: string
    enum:
      - SELF_CALIBRATION
      - EXTERNAL_CALIBRATION
  AssetPresenceModel:
    title: Asset Presence Model
    description: The presence of an asset. Wraps the AssetPresenceStatus into an object.
    type: object
    required:
      - assetPresence
    properties:
      assetPresence:
        $ref: '#/definitions/AssetPresenceStatus'
  AssetPresenceUpdateModel:
    title: Asset Presence Update Model
    description: The presence update of an asset. Wraps the AssetPresenceUpdateStatus into an object.
    type: object
    required:
      - assetPresence
    properties:
      assetPresence:
        $ref: '#/definitions/AssetPresenceUpdateStatus'
  AssetPresenceWithSystemConnectionModel:
    title: Asset Presence With System Connection Model
    description: The presence of an asset and the connection of the system in which it resides.
    allOf:
      - $ref: '#/definitions/AssetPresenceModel'
      - type: object
        properties:
          systemConnection:
            $ref: '#/definitions/SystemConnectionStatus'
  TemperatureSensorModel:
    title: Temperature Sensor
    description: The sensor name and temperature reading in Celsius.
    type: object
    required:
        - reading
    properties:
      name:
        description: Sensor name
        type: string
        example: Sensor0
      reading:
        description: Sensor reading
        type: number
        format: double
        example: 25.8
  BaseAssetLocationModel:
    title: Base Asset Location Model
    description: Basic information about the asset and the system in which it resides. Base class for other models.
    type: object
    required:
      - minionId
    properties:
      minionId:
        description: Identifier of the minion where the asset is located.
        type: string
        example: NI_PXIe-8135_Embedded_Controller--MAC-00-80-2F-23-52-65
      parent:
        description: The parent of the asset.
        type: string
        example: Chassis1
      resourceUri:
        description: Identifier of a resource.
        type: string
        example: 1/4243/1949942980/01BB877A/3
      slotNumber:
        description: The number of the slot in which the asset is located.
        type: integer
        example: 2
  AssetLocationWithPresenceModel:
    title: Asset Location With Presence Model
    description: Information about the asset location and presence. Used in create operations.
    allOf:
      - $ref: '#/definitions/BaseAssetLocationModel'
      - type: object
        properties:
          state:
            $ref: '#/definitions/AssetPresenceModel'
  AssetLocationWithPresenceUpdateModel:
    title: Asset Location With Presence Update Model
    description: Information about the asset location and presence update. Used in update operations.
    allOf:
      - $ref: '#/definitions/BaseAssetLocationModel'
      - type: object
        properties:
          state:
            $ref: '#/definitions/AssetPresenceUpdateModel'
  AssetLocationModel:
    title: Asset Location Model
    description: Information about the asset location, presence and the connection status of the system in which it resides.
    allOf:
      - $ref: '#/definitions/BaseAssetLocationModel'
      - type: object
        properties:
          systemName:
            description: Hostname of the system.
            type: string
            example: APM-PXI1
          state:
            $ref: '#/definitions/AssetPresenceWithSystemConnectionModel'
  ExternalCalibrationOperatorModel:
    title: External Calibration Operator
    description: The information about the operator who performed the calibration.
    type: object
    properties:
      displayName:
        description: Display name of logged in user.
        type: string
        example: John Doe
      userId:
        description: Identifier of the logged in user.
        type: string
        example: johnDoe2020
  SelfCalibrationModel:
    title: Self-Calibration
    description: Contains data from the last self-calibration.
    type: object
    required:
        - date
    properties:
      temperatureSensors:
          description: An array of temperature sensor information.
          type: array
          items:
            $ref: '#/definitions/TemperatureSensorModel'
      isLimited:
        description: Whether the last self-calibration of the asset was a limited calibration.
        type: boolean
        example: false
      date:
        description: ISO-8601 formatted timestamp specifying the last date the asset was self-calibrated.
        type: string
        format: date-time
        example: '2018-05-07T18:58:05.219692Z'
  ExternalCalibrationBaseModel:
    title: Base External Calibration
    description: Data for an external calibration entry.
    type: object
    required:
        - date
        - recommendedInterval
        - nextRecommendedDate
        - temperatureSensors
    properties:
      temperatureSensors:
          description: An array of temperature sensor information.
          type: array
          items:
            $ref: '#/definitions/TemperatureSensorModel'
      isLimited:
        description: Whether the last external calibration of the asset was a limited calibration.
        type: boolean
        example: false
      date:
        description: ISO-8601 formatted timestamp specifying the last date the asset was externally calibrated.
        type: string
        format: date-time
        example: '2018-05-07T18:58:05.219692Z'
      recommendedInterval:
        description: The manufacturer's recommended calibration interval in months.
        type: integer
        example: 12
      nextRecommendedDate:
        description: ISO-8601 formatted timestamp specifying the recommended date for the next external calibration.
        type: string
        format: date-time
        example: '2019-05-07T18:58:05.219692Z'
      nextCustomDueDate:
        description: ISO-8601 formatted timestamp specifying the date for the next external calibration.
        type: string
        format: date-time
        example: '2019-06-07T18:58:05.219692Z'
      comments:
        description: Calibration comments provided by an operator.
        type: string
        example: This is a comment.
    example:
      temperatureSensors: [
        { name: 'Sensor0' , reading: 25.7 }
      ]
      isLimited: false
      date: '2018-05-07T18:58:05.000Z'
      recommendedInterval: 12
      nextRecommendedDate: '2019-05-07T18:58:05.000Z'
      nextCustomDueDate: '2019-06-07T18:58:05.000Z'
      comments: 'This is a comment.'
  ExternalCalibrationModel:
    title: External Calibration
    description: Data from the last external calibration.
    allOf:
      - $ref: '#/definitions/ExternalCalibrationBaseModel'
      - type: object
        properties:
          entryType:
            $ref: '#/definitions/CalibrationMode'
          operator:
            $ref: '#/definitions/ExternalCalibrationOperatorModel'
        example:
          temperatureSensors: [
            { name: 'Sensor0' , reading: 25.7 }
          ]
          isLimited: false
          date: '2018-05-07T18:58:05.000Z'
          recommendedInterval: 12
          nextRecommendedDate: '2019-05-07T18:58:05.000Z'
          nextCustomDueDate: '2019-06-07T18:58:05.000Z'
          comments: 'This is a comment.'
          entryType: MANUAL
          operator:
            displayName: John Doe
            userId: johnDoe2020
  ExternalCalibrationWithChecksumModel:
    title: External Calibration
    description: Data from the last external calibration including checksum.
    allOf:
      - $ref: '#/definitions/ExternalCalibrationModel'
      - type: object
        properties:
          checksum:
            description: Checksum for the external calibration.
            type: string
            example: 7d9f4953655d48a6a5fd68e9dfd41345
        example:
          temperatureSensors: [
            { name: 'Sensor0' , reading: 25.7 }
          ]
          isLimited: false
          date: '2018-05-07T18:58:05.000Z'
          recommendedInterval: 12
          nextRecommendedDate: '2019-05-07T18:58:05.000Z'
          nextCustomDueDate: '2019-06-07T18:58:05.000Z'
          comments: 'This is a comment.'
          entryType: MANUAL
          operator:
            displayName: John Doe
            userId: johnDoe2020
          checksum: 7d9f4953655d48a6a5fd68e9dfd41345
  BaseAssetModel:
    title: Base Asset Model
    description: An object describing basic properties of an asset. Base class for other models.
    allOf:
      - $ref: '#/definitions/AssetIdentificationModel'
      - type: object
        properties:
          name:
            description: Name of the asset.
            type: string
            example: PCISlot2
          assetType:
            $ref: '#/definitions/AssetType'
          firmwareVersion:
            description: Firmware version of the asset.
            type: string
            example: A1
          hardwareVersion:
            description: Hardware version of the asset.
            type: string
            example: 12A
          visaResourceName:
            description: VISA resource name of the asset.
            type: string
            example : vs-1234
          temperatureSensors:
            description: An array of temperature sensor information.
            type: array
            items:
              $ref: '#/definitions/TemperatureSensorModel'
          supportsSelfCalibration:
            description: Whether the asset supports self-calibration.
            type: boolean
            example: true
          supportsExternalCalibration:
            description: Whether the asset supports external calibration.
            type: boolean
            example: true
          customCalibrationInterval:
            description: The interval represented in months used for computing calibration due date. If not set, the recommended calibration interval from the calibration model is used.
            type: integer
            example: 24
          selfCalibration:
            $ref: '#/definitions/SelfCalibrationModel'
          isNIAsset:
            description: Whether this asset is an NI asset (true) or a third-party asset (false).
            type: boolean
            example: true
          workspace:
            type: string
            description: The ID of the workspace containing the asset.
            example: '5bc5e9092a4fa4c71cfa7197'
          fileIds:
            description: The file IDs linked to the asset.
            type: array
            items:
                type: string
                example: '608a5684800e325b48837c2a'
          supportsSelfTest:
            description: Whether the asset supports self-test.
            type: boolean
            example: true
          supportsReset:
            description: Whether the asset supports reset.
            type: boolean
            example: true
  AssetCreateModel:
    title: Asset Create Model
    description: >-
          An object describing the properties for creating an asset.
          
          
          Unique Asset Identification is required to create an asset. See AssetIdentificationModel for details.
    allOf:
      - $ref: '#/definitions/BaseAssetModel'
      - type: object
        required:
          - name
          - location
        properties:
          location:
            $ref: '#/definitions/AssetLocationWithPresenceModel'
          externalCalibration:
            $ref: '#/definitions/ExternalCalibrationWithChecksumModel'
          discoveryType:
            $ref: '#/definitions/DiscoveryType'
          properties:
            description: Key-value-pair metadata associated with an asset.
            type: object
            additionalProperties:
              type: string
            example:
              Key1: Value1
          keywords:
            description: Words or phrases associated with an asset.
            type: array
            items:
              type: string
              example: Keyword1
  AssetUpdateModel:
    title: Asset Update Model
    description: >-
          An object describing the properties for updating an asset.
          
          
          Unique Asset Identification is required to create an asset. If the id property is not specified, a set of properties are required to identify an asset. See AssetIdentificationModel for details.
          If the id is specified on the model, the following properties will be ignored: busType, modelName, modelNumber, vendorName, vendorNumber and serialNumber.
    allOf:
      - $ref: '#/definitions/BaseAssetModel'
      - type: object
        properties:
          id:
            description: Unique identifier of the asset.
            type: string
            example: "123;01BB877A;4244;0"
          location:
            $ref: '#/definitions/AssetLocationWithPresenceUpdateModel'
          externalCalibration:
            $ref: '#/definitions/ExternalCalibrationWithChecksumModel'
          properties:
            description: Key-value-pair metadata associated with an asset.
            type: object
            additionalProperties:
              type: string
            example:
              Key1: Value1
          keywords:
            description: Words or phrases associated with an asset.
            type: array
            items:
              type: string
              example: Keyword1
  AssetModel:
    title: Asset Model
    description: An object describing an asset with all of its properties.
    allOf:
      - $ref: '#/definitions/BaseAssetModel'
      - type: object
        properties:
          id:
            description: Unique identifier of the asset.
            type: string
            example: "29162;01B245D6;4243;0"
          location:
            $ref: '#/definitions/AssetLocationModel'
          calibrationStatus:
            $ref: '#/definitions/CalibrationStatus'
          isSystemController:
            description: Whether this asset represents a System Controller.
            type: boolean
            example: true
          externalCalibration:
            $ref: '#/definitions/ExternalCalibrationModel'
          discoveryType:
            $ref: '#/definitions/DiscoveryType'
          properties:
            description: Key-value-pair metadata associated with an asset.
            type: object
            additionalProperties:
              type: string
            example:
              Key1: Value1
          keywords:
            description: Words or phrases associated with an asset.
            type: array
            items:
              type: string
              example: Keyword1
          lastUpdatedTimestamp:
            description: ISO-8601 formatted timestamp specifying the last date that the asset has had a property update.
            type: string
            format: date-time
            example: '2018-05-07T18:58:05.219692Z'
  AssetMetadata:
    title: Asset Metadata
    description: Information about asset metadata
    type: object
    properties:
      keywords:
        description: Words or phrases associated with an asset.
        type: array
        items:
          type: string
          example: Keyword1
      properties:
        description: Key-value-pair metadata associated with an asset.
        type: object
        additionalProperties:
          type: string
        example:
          Key1: Value1
  AssetWithAvailabilityHistoryModel:
    title: Asset With Availability History
    description: Information about the availability, or connection, history of an asset, which also contains information about each system in which the asset was present.
    type: object
    properties:
      assetName:
        description: The asset name for which availability history is computed.
        type: string
        example: PCI-Slot2
      assetIdentifier:
        description: The identifier of the asset for which availability history is computed.
        type: string
        example: 29162;01B245D6;4243;0
      availabilityHistory:
        description: The availability history for the asset consisting in availability information for each system in which the asset was present.
        type: array
        items:
          $ref: '#/definitions/OverallAvailabilityInTimespanModel'
    required:
      - assetName
      - assetIdentifier
      - availabilityHistory
  AvailabilityTimeInterval:
    title: Availability Time Interval
    description: Time interval containing a start and an end date.
    type: object
    properties:
      startDate:
        description: >-
          A date value which can be used to specify the beginning of a timespan. 
          
          This parameter is required to have the "ISO 8601" format in order to be considered valid. 
          
          The time component of the request is ignored.
        type: string
        format: date-time
        example: '2018-05-01T00:00:00Z'
      endDate:
        description: >- 
          A date value which can be used to specify the end of a timespan.
          
          This parameter is required to have the "ISO 8601" format in order to be considered valid. 
          
          The time component of the request is ignored.
        type: string
        format: date-time
        example: '2018-05-20T00:00:00Z'
    required:
      - startDate
      - endDate
  AssetWithAvailabilityInIntervalModel:
    title: Asset With Availability In Interval
    description: Information about the availability, or connection history, of an asset. This includes the name of each system in which the asset was present during an interval of time you specify.
    type: object
    properties:
      assetName:
        description: The asset name for which the availability was computed.
        type: string
        example: PCI-Slot2
      assetIdentifier:
        description: The identifier of the asset for which the availability was computed.
        type: string
        example: 29162;01B245D6;4243;0
      interval:
        $ref: '#/definitions/AvailabilityTimeInterval'
      availabilityInSystems:
        description: List containing the availability percentage of an asset for each system it was present in during a given time interval.
        type: array
        items:
          $ref: '#/definitions/AssetAvailabilityInSystemModel'
  AssetAvailabilityInSystemModel:
    title: Asset Availability In System Model
    description: Contains the availability percentage and the name of the system an asset was present in during an interval.
    type: object
    properties:
      systemName:
        description: Name of the system to which the availability data corresponds.
        type: string
        example: 'PXI1'
      availabilityPercentage:
        description: The percentage of time in which the asset was available in the system.
        type: number
        format: double
        example: 7.38958
    required:
      - systemName
      - availabilityPercentage
  OverallAvailabilityInSystemModel:
    title: Overall Availability In System
    description: Availability information for an asset in a single system for the specified timespan.
    type: object
    properties:
      key:
        description: Date representing the beginning of a timespan.
        type: string
        example: 2018/11/01
      value:
        description: The percentage of time in which the asset was available in a system during the specific timespan.
        type: number
        format: double
        example: 7.38958
    required:
      - key
      - value
  OverallAvailabilityInTimespanModel:
    title: Overall Availability In Timespan
    description: Contains availability information for an asset in a single system for the specified timespan.
    type: object
    properties:
      key:
        description: The name of the system in which the asset was available.
        type: string
        example: APM-PXI1
      value:
        description: The percentage of time in which the asset was available in a system during a specific timespan.
        type: number
        format: double
        example: 7.38958
    required:
      - key
      - value
  ResponseFormat:
    title: Response Format
    description: The return type. Valid options are "JSON" and "CSV".
    type: string
    default: JSON
    enum:
      - JSON
      - CSV
  Destination:
    title: Request Destination
    description:
      The destination of the request.
      "INLINE" (default) returns the list of resources as the body of the response.
      "DOWNLOAD" returns the list of resources as the body of the response and indicates to the client that it should be downloaded as a file.
      "FILE_SERVICE" sends the list of resources to the file ingestion service and returns the ID of the file to the client in a JSON object.
    type: string
    default: INLINE
    enum:
      - INLINE
      - DOWNLOAD
      - FILE_SERVICE
  FileIngestionWorkspace:
    title: File Ingestion Workspace
    description: The ID of the workspace to put the file into, if the destination is "FILE_SERVICE".
    type: string
    example: '5bc5e9092a4fa4c71cfa7197'
  QueryHistoryRequestModel:
    title: Query History Request Model
    description: Object containing options for querying history.
    type: object
    properties:
      responseFormat:
        $ref: '#/definitions/ResponseFormat'
      destination:
        $ref: '#/definitions/Destination'
      fileIngestionWorkspace:
        $ref: '#/definitions/FileIngestionWorkspace'
    example:
      responseFormat: CSV
      destination: DOWNLOAD
  ServicePolicyModel:
    title: Service policy
    description: An object containing the service policy.
    type: object
    properties:
      calibrationPolicy:
        description: Calibration policy
        type: object
        properties:
          daysForApproachingCalibrationDueDate:
            description: The number of days for an asset to be considered as approaching calibration.
            type: integer
            example: 30
      workingHoursPolicy:
        description: An object that describes the start time and end time of a working day.
        type: object
        properties:
          startTime:
            description: A string formatted as an hour with minutes and seconds representing the start time of a working day.
            type: string
            example: "09:00:00"
          endTime:
            description: A string formatted as an hour with minutes and seconds representing the end time of a working day.
            type: string
            example: "17:00:00"
  UtilizationHistoryField:
    title: Asset Utilization History Field
    description: An enumeration of all fields in an Asset Utilization History record.
    type: string
    enum:
      - UTILIZATION_IDENTIFIER
      - ASSET_IDENTIFIER
      - MINION_ID
      - CATEGORY
      - TASK_NAME
      - USER_NAME
      - START_TIMESTAMP
    example:
      START_TIMESTAMP
  AssetIdentificationModel:
    title: Asset Identification
    description: >-
        Object containing properties which identify an asset.
        An asset is uniquely identified by a combination of:
            - busType
            - modelName or modelNumber
            - vendorName or vendorNumber
            - serialNumber or minionId (part of the Location)
    type: object
    properties:
      modelName:
        description: Model name of the asset.
        type: string
        example: "NI PXIe-6368"
      modelNumber:
        description: Model number of the asset.
        type: integer
        example : 123
      serialNumber:
        description: Serial number of the asset.
        type: string
        example: "01BB877A"
      vendorName:
        description: Vendor name of the asset.
        type: string
        example: National Instruments
      vendorNumber:
        description: Vendor number of the asset.
        type: integer
        example: 4244
      busType:
        $ref: '#/definitions/BusType'
  UtilizationIdentifiersWithTimestampModel:
    title: Utilization Identifiers With Timestamp
    description: Object containing a collection of utilization identifiers with a timestamp.
    type: object
    required:
      - utilizationIdentifiers
      - utilizationTimestamp
    properties:
      utilizationIdentifiers:
        description: Array representing the unique identifier of an asset utilization history record.
        type: array
        items:
          type: string
          example: "2916201B245D642430"
      utilizationTimestamp:
        description: >-
          A date time value which can be used to specify the end of an asset utilization.

          This parameter must have the "ISO 8601" format in order to be considered valid.
        type: string
        format: date-time
        example: '2019-05-01T00:00:00.519Z'
  Skip:
    description:
      The number of resources to skip in the result when paging.
      For example, a list of 100 resources with a skip value of 50 will return
      entries 51 through 100.
    type: integer
    default: 0
    example: 0
    x-example: 0
  Take:
    description:
      How many resources to return in the result, or -1 to take all.
      The default is 1000.
      For example, a list of 100 resources with a take value of 25 will return
      entries 1 through 25.
    type: integer
    default: 1000
    example: 1000
    x-example: 1000
  UtilizationTimeIntervalModel:
    title:  Utilization Time Interval
    description: Time interval for which to retrieve asset/system utilization.
    type: object
    properties:
        startDate:
            description: >-
                A date time value which can be used to specify the beginning of a timespan.

                This parameter is required to have the "ISO 8601" format in order to be considered valid. 
            
                The time component of the request is ignored.
            type: string
            format: date-time
            example: '2019-05-01T00:00:00.000Z'
        endDate:
            description: >-
                A date time value which can be used to specify the end of a timespan.

                This parameter is required to have the "ISO 8601" format in order to be considered valid.
            
                The time component of the request is ignored.
            type: string
            format: date-time
            example: '2019-05-20T00:00:000Z' 
parameters:
  TimespanGranularity:
    in: query
    name: granularity
    description: The possible granularities that can be used to obtain asset availability. WEEK is used when no granularity is specified.
    type: string
    enum:
      - NONE
      - WEEK
      - MONTH
  AssetId:
    in: path
    name: assetId
    description: The identifier of an asset.
    type: string
    required: true
    x-example: "29162;01B245D6;4243;0"
  FileId:
    in: path
    name: fileId
    description: The identifier of a file.
    type: string
    required: true
    x-example: "607fffe41e4564dda3593eb0"
  Skip:
    in: query
    name: skip
    description:
      The number of resources to skip in the result when paging.
      For example, a list of 100 resources with a skip value of 50 will return
      entries 51 through 100.
    type: integer
    default: 0
    x-example: 0
  Take:
    in: query
    name: take
    description:
      How many resources to return in the result, or -1 to take all.
      The default is 1000.
      For example, a list of 100 resources with a take value of 25 will return
      entries 1 through 25.
    type: integer
    default: 1000
    x-example: 1000
  AssetAvailabilityComparison:
    in: body
    name: compareAvailability
    description: Request body consisting in a time interval and a list of assets to compute availability history for.
    schema:
      title: Compare Asset Availability
      type: object
      required:
        - assetIds
        - startDate
        - endDate
      properties:
        assetIds:
          description: Multiple asset identifiers for which to compare availability history.
          type: array
          items:
            type: string
          example: ["29162;01B245D6;4243;0", "29162;01B245D6;4243;1"]
        startDate:
          description: >-
            A date value which can be used to specify the beginning of a timespan. 
            
            This parameter is required to have the "ISO 8601" format in order to be considered valid. 
            
            The time component of the request is ignored.
          type: string
          example: '2018-05-01T00:00:00.519Z'
        endDate:
          description: >- 
            A date value which can be used to specify the end of a timespan.
            
            This parameter is required to have the "ISO 8601" format in order to be considered valid. 
            
            The time component of the request is ignored.
          type: string
          example: '2018-05-20T00:00:00Z'
    required: true
  QueryAssetsAvailabilityRequestBody:
    in: body
    name: queryAssetsAvailability
    description: Request body containing a list of asset identifiers and a list of time intervals.
    schema:
      title: Query Assets Availability Request Body
      type: object
      required:
        - ids
        - intervals
      properties:
        ids:
          description: Multiple asset identifiers for which the availability data is retrieved.
          type: array
          items:
            type: string
          example: ["29162;01B245D6;4243;0", "29162;01B245D6;4243;1"]
        intervals:
          description: Time intervals for which the availability data is retrieved.
          type: array
          items:
            $ref: '#/definitions/AvailabilityTimeInterval'
  QueryAssetsAvailabilityReportRequestBody:
    in: body
    name: queryAssetsAvailabilityReport
    description: Request body containing a list of asset identifiers and a list of time intervals.
    schema:
      title: Query Assets Availability Report Request Body
      type: object
      required:
        - ids
        - intervals
      properties:
        ids:
          description: Multiple asset identifiers for which the availability data is retrieved.
          type: array
          items:
            type: string
          example: ["29162;01B245D6;4243;0", "29162;01B245D6;4243;1"]
        intervals:
          description: Time intervals for which the availability data is retrieved.
          type: array
          items:
            $ref: '#/definitions/AvailabilityTimeInterval'
  DeleteAssetsRequestBody:
    in: body
    name: deleteAssets
    description: Request body containing identifiers of the assets for which all data must be deleted.
    required: true
    schema:
      title: Delete Assets Request
      description: Request body containing identifiers of the assets to delete all information for.
      type: object
      properties:
        ids:
          description: Multiple asset identifiers for which to delete all data.
          type: array
          items:
            type: string
          example: ["29162;01B245D6;4243;0"]
  CreateAssetsRequestBody:
    in: body
    name: createAssets
    description: Request body containing an array of assets that should be created.
    required: true
    schema:
      title: Create Assets Request
      description: Request body containing an array of assets that should be created.
      type: object
      properties:
        assets:
          description: Multiple assets that should be created.
          type: array
          items:
            $ref: '#/definitions/AssetCreateModel'
  UpdateAssetsRequestBody:
    in: body
    name: updateAssets
    description: Request body containing an array of assets to update.
    required: true
    schema:
      title: Update Assets Request
      description: Request body containing an array of assets to update.
      type: object
      properties:
        assets:
          description: Multiple assets that should be updated.
          type: array
          items:
            $ref: '#/definitions/AssetUpdateModel'
  DeleteCalibrationsRequestBody:
    in: body
    name: deleteCalibrationsRequestBody
    description: Request body containing identifiers of the calibration history entries to delete.
    schema:
      title: Delete Calibrations Request
      description: Request body containing identifiers of the calibration history entries to delete.
      type: object
      properties:
        calibrationIds:
          description: Identifiers of the calibration entries to delete.
          type: array
          items:
            type: string
          example: ["5c4f0834174ae321b8a95a03"]
  ExternalCalibrationRequestBody:
    in: body
    name: externalCalibrationRequestBody
    description: Request body containing data to create a new external calibration entry for an asset.
    schema:
      title: Post External Calibration Request
      description: Request body containing data to create a new external calibration entry for an asset.
      type: object
      properties:
        externalCalibration:
          $ref: '#/definitions/ExternalCalibrationWithChecksumModel'
  UpdateMetadata:
    in: body
    name: updateMetadata
    description: >-
      The metadata to be updated on the asset. The method overrides any asset metadata with what is contained in the request.

      - In order to ignore metadata properties update, leave the value off the request.

      - In order to set the value to null, assign an empty array or an empty object to the request metadata object.
    required: true
    schema:
      title: Update Metadata Request
      description: The asset metadata information to be updated.
      type: object
      properties:
        keywords:
          description: Keywords associated with an asset.
          type: array
          items:
            type: string
            example: Keyword1
        properties:
          description: Properties associated with an asset.
          type: object
          additionalProperties:
            type: string
          example:
            Key1: Value1
  LinkFiles:
    in: body
    name: linkFiles
    description: Link files to an asset.
    required: true
    schema:
      title: Link Files Request
      description: Link files to an asset
      type: object
      properties:
        fileIds:
          description: File IDs to be linked to an asset.
          type: array
          items:
            type: string
            example: 607fffe41e4564dda3593eb0
  QueryInUseAssetsRequest:
    in: body
    name: queryInUseAssets
    description: Request body consisting of filters to apply when retrieving assets currently being utilized.
    schema:
      title: Query In Use Assets Request
      description: Object containing filters to apply when retrieving utilized assets.
      type: object
      properties:
        assetFilter:
          description: >-
            The filter criteria for assets. Consists of a string of queries composed using AND/OR operators.
            String values and date strings need to be enclosed in double quotes.
            Parenthesis can be used around filters to better define the order of operations.

            Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


            Operators:

            - Equals operator '='. Example: 'x = y'

            - Not equal operator '!='. Example: 'x != y'

            - Greater than operator '>'. Example: 'x > y'

            - Greater than or equal operator '>='. Example: 'x >= y'

            - Less than operator '<'. Example: 'x < y'

            - Less than or equal operator '<='. Example: 'x <= y'

            - Logical AND operator 'and'. Example: 'x and y'

            - Logical OR operator 'or'. Example: 'x or y'

            - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

            - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


            Valid asset properties that can be used in the filter:

            - AssetIdentifier: String representing the unique identifier of an asset.

            - SerialNumber: String representing the serial number of an asset.

            - ModelName: String representing the model name of an asset.

            - ModelNumber: Unsigned integer representing the model number of an asset.

            - VendorName: String representing the vendor name of an asset.

            - VendorNumber: Unsigned integer representing the vendor number of an asset.

            - AssetName: String representing the asset name.

            - FirmwareVersion: String representing the firmware version of an asset.

            - HardwareVersion: String representing the hardware version of an asset.

            - BusType: String enumeration representing the bus type of an asset. Possible values are: BUILT_IN_SYSTEM, PCI_PXI, USB, GPIB, VXI, SERIAL, TCP_IP, CRIO, SCXI, CDAQ, SWITCH_BLOCK, SCC, FIRE_WIRE, ACCESSORY, CAN, SWITCH_BLOCK_DEVICE.

            - IsNIAsset: Boolean flag specifying whether the asset is an NI asset or a third-party asset.

            - Keywords: Collection of string values representing asset metadata keywords. Example: 'Keywords=["keyword1", "keyword2"]'.

            - Properties: Collection of key-value pairs, each key-value pair representing an asset metadata property. Example: 'Properties=["key1":"value1", "key2":"value2"]'.

            - Location.MinionId: String representing the identifier of the minion in which the asset is located in.

            - Location.SystemName: String representing the name of the system that the asset is located in.

            - Location.SlotNumber: Unsigned integer representing the slot number the asset is located in.

            - Location.AssetState.SystemConnection: String enumeration representing the connection state of the system the asset is currently located in. Possible values are: APPROVED, DISCONNECTED, CONNECTED_UPDATE_PENDING, CONNECTED_UPDATE_SUCCESSFUL, CONNECTED_UPDATE_FAILED, UNSUPPORTED, ACTIVATED.

            - Location.AssetState.AssetPresence: String enumeration representing the present status of an asset in a system. Possible values are: INITIALIZING, UNKNOWN, NOT_PRESENT, PRESENT.

            - SupportsSelfCalibration: Boolean flag specifying whether the asset supports self-calibration.

            - SelfCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was self-calibrated. Example: "2018-05-20T00:00:00Z"

            - SupportsExternalCalibration: Boolean flag specifying whether the asset supports external calibration.

            - CustomCalibrationInterval: Integer representing the custom calibration interval, in months.

            - CalibrationStatus: String enumeration representing the calibration status of an asset. Possible values are: OK, APPROACHING_RECOMMENDED_DUE_DATE, PAST_RECOMMENDED_DUE_DATE.

            - ExternalCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was externally-calibrated. Example: "2018-05-20T00:00:00Z"

            - ExternalCalibration.NextRecommendedDate: ISO-8601 formatted timestamp string specifying the recommended date for the next external calibration. Example: "2018-05-20T00:00:00Z"

            - ExternalCalibration.RecommendedInterval: Integer representing the manufacturer-recommended calibration interval, in months.

            - ExternalCalibration.Comments: String representing any external calibration comments.

            - ExternalCalibration.IsLimited: Boolean flag specifying whether the last external calibration was a limited calibration.

            - ExternalCalibration.Operator.DisplayName: String representing the name of the operator which performed an external calibration on a third-party asset.
          type: string
          example: IsSystemController = True
        utilizationFilter:
          description: >-
            The filter criteria for asset utilization. Consists of a string of queries composed using AND/OR operators.
            String values and date strings need to be enclosed in double quotes.
            Parenthesis can be used around filters to better define the order of operations.

            Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


            Operators:

            - Equals operator '='. Example: 'x = y'

            - Not equal operator '!='. Example: 'x != y'

            - Greater than operator '>'. Example: 'x > y'

            - Greater than or equal operator '>='. Example: 'x >= y'

            - Less than operator '<'. Example: 'x < y'

            - Less than or equal operator '<='. Example: 'x <= y'

            - Logical AND operator 'and'. Example: 'x and y'

            - Logical OR operator 'or'. Example: 'x or y'

            - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

            - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


            Valid asset utilization properties that can be used in the filter:

            - MinionId:  String representing the identifier of a minion in which an asset might be located in.

            - Category: String representing the utilization task category.

            - UserName: : String representing the name of the operator who utilized the asset.
          type: string
          example: Category = "Test"
        skip:
          description:
            The number of resources to skip in the result when paging.
            For example, a list of 100 resources with a skip value of 50 will return
            entries 51 through 100.
          type: integer
          default: 0
          example: 0
        take:
          description: The maximum number of asset utilization history records to return.
          type: integer
          format: int32
          default: 1000
          minimum: 0
          example: 1000
  QueryAssetsRequest:
    in: body
    name: queryAssets
    description: Request body consisting of filters to apply when retrieving assets. Currently, the valid combinations of ResponseFormat and Destination are [JSON;INLINE], [CSV;DOWNLOAD], [CSV;FILE_SERVICE].
    schema:
      title: Query Assets Request
      description: Object containing filters to apply when retrieving assets. If no assets match the filter and the destination is "DOWNLOAD" or "FILE_SERVICE", an empty report will be generated.
      type: object
      properties:
        ids:
          description: Identifiers of the assets to be retrieved.
          type: array
          items:
            type: string
          example: []
        responseFormat:
          $ref: '#/definitions/ResponseFormat'
        destination:
          $ref: '#/definitions/Destination'
        fileIngestionWorkspace:
          $ref: '#/definitions/FileIngestionWorkspace'
        skip:
          $ref: '#/definitions/Skip'
        take:
          $ref: '#/definitions/Take'
        calibratableOnly:
          description: >-
            Whether to generate a report with calibrated asset specific columns.

            When the destination is "DOWNLOAD or "FILE_SERVICE" this property is used as follows:

            - It determines the type of the report. When true, the file will be a calibration report. If this is false, the file will be an asset report. 
            
            - If asset IDs are in the request, this property will not be used for filtering. If no asset IDs are in the request, setting this property to true will generate a report only for the calibrated assets.
          
          type: boolean
          default: false
        filter:
          description: >-
            The filter criteria for assets. Consists of a string of queries composed using AND/OR operators.
            String values and date strings need to be enclosed in double quotes.
            Parenthesis can be used around filters to better define the order of operations.

            Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


            Operators:

            - Equals operator '='. Example: 'x = y'

            - Not equal operator '!='. Example: 'x != y'

            - Greater than operator '>'. Example: 'x > y'

            - Greater than or equal operator '>='. Example: 'x >= y'

            - Less than operator '<'. Example: 'x < y'

            - Less than or equal operator '<='. Example: 'x <= y'

            - Logical AND operator 'and'. Example: 'x and y'

            - Logical OR operator 'or'. Example: 'x or y'

            - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

            - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


            Valid asset properties that can be used in the filter:

            - AssetIdentifier: String representing the unique identifier of an asset.

            - SerialNumber: String representing the serial number of an asset.

            - ModelName: String representing the model name of an asset.

            - ModelNumber: Unsigned integer representing the model number of an asset.

            - VendorName: String representing the vendor name of an asset.

            - VendorNumber: Unsigned integer representing the vendor number of an asset.

            - AssetName: String representing the asset name.

            - FirmwareVersion: String representing the firmware version of an asset.

            - HardwareVersion: String representing the hardware version of an asset.

            - BusType: String enumeration representing the bus type of an asset. Possible values are: BUILT_IN_SYSTEM, PCI_PXI, USB, GPIB, VXI, SERIAL, TCP_IP, CRIO, SCXI, CDAQ, SWITCH_BLOCK, SCC, FIRE_WIRE, ACCESSORY, CAN, SWITCH_BLOCK_DEVICE.

            - IsNIAsset: Boolean flag specifying whether the asset is an NI asset or a third-party asset.

            - Keywords: Collection of string values representing asset metadata keywords. Example: 'Keywords=["keyword1", "keyword2"]'.

            - Properties: Collection of key-value pairs, each key-value pair representing an asset metadata property. Example: 'Properties=["key1":"value1", "key2":"value2"]'.

            - Location.MinionId: String representing the identifier of the minion in which the asset is located in.

            - Location.SystemName: String representing the name of the system that the asset is located in.

            - Location.SlotNumber: Unsigned integer representing the slot number the asset is located in.

            - Location.AssetState.SystemConnection: String enumeration representing the connection state of the system the asset is currently located in. Possible values are: APPROVED, DISCONNECTED, CONNECTED_UPDATE_PENDING, CONNECTED_UPDATE_SUCCESSFUL, CONNECTED_UPDATE_FAILED, UNSUPPORTED, ACTIVATED.

            - Location.AssetState.AssetPresence: String enumeration representing the present status of an asset in a system. Possible values are: INITIALIZING, UNKNOWN, NOT_PRESENT, PRESENT.

            - SupportsSelfCalibration: Boolean flag specifying whether the asset supports self-calibration.

            - SelfCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was self-calibrated. Example: "2018-05-20T00:00:00Z"

            - SupportsExternalCalibration: Boolean flag specifying whether the asset supports external calibration.

            - CustomCalibrationInterval: Integer representing the custom calibration interval, in months.

            - CalibrationStatus: String enumeration representing the calibration status of an asset. Possible values are: OK, APPROACHING_RECOMMENDED_DUE_DATE, PAST_RECOMMENDED_DUE_DATE.

            - ExternalCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was externally-calibrated. Example: "2018-05-20T00:00:00Z"

            - ExternalCalibration.NextRecommendedDate: ISO-8601 formatted timestamp string specifying the recommended date for the next external calibration. Example: "2018-05-20T00:00:00Z"

            - ExternalCalibration.RecommendedInterval: Integer representing the manufacturer-recommended calibration interval, in months.

            - ExternalCalibration.Comments: String representing any external calibration comments.

            - ExternalCalibration.IsLimited: Boolean flag specifying whether the last external calibration was a limited calibration.

            - ExternalCalibration.Operator.DisplayName: String representing the name of the operator which performed an external calibration on a third-party asset.
          type: string
          example: IsSystemController = True
  QueryHistoryRequestBody:
    in: body
    name: queryHistory
    description: Request body consisting of options to be used for querying history for an asset.
    schema:
      $ref: '#/definitions/QueryHistoryRequestModel'
  ServicePolicyUpdateRequestBody:
    in: body
    name: servicePolicyUpdateRequest
    required: true
    description: The request to update properties of the current service policy.
    schema:
      $ref: '#/definitions/ServicePolicyModel'
  QueryAssetUtilizationRequest:
    in: body
    name: queryBody
    description: Request body consisting of filters for asset utilization, assets, and time intervals.
    schema:
      title: Query Asset Utilizations Request
      description: Object containing filters for asset utilization, assets, and time intervals.
      type: object
      required:
        - utilizationIntervals
      properties:
        utilizationFilter:
          description: >-
            The filter criteria for asset utilization. Consists of a string of queries composed using AND/OR operators.
            String values and date strings need to be enclosed in double quotes.
            Parenthesis can be used around filters to better define the order of operations.

            Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


            Operators:

            - Equals operator '='. Example: 'x = y'

            - Not equal operator '!='. Example: 'x != y'

            - Greater than operator '>'. Example: 'x > y'

            - Greater than or equal operator '>='. Example: 'x >= y'

            - Less than operator '<'. Example: 'x < y'

            - Less than or equal operator '<='. Example: 'x <= y'

            - Logical AND operator 'and'. Example: 'x and y'

            - Logical OR operator 'or'. Example: 'x or y'

            - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

            - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


            Valid asset utilization properties that can be used in the filter:

            - MinionId:  String representing the identifier of a minion in which an asset might be located in.

            - Category: String representing the utilization task category.

            - UserName: : String representing the name of the operator who utilized the asset.
          type: string
          example: Category = "Test"
        assetFilter:
          description: >-
              The filter criteria for assets. Consists of a string of queries composed using AND/OR operators.
              String values and date strings need to be enclosed in double quotes.
              Parenthesis can be used around filters to better define the order of operations.

              Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


              Operators:

              - Equals operator '='. Example: 'x = y'

              - Not equal operator '!='. Example: 'x != y'

              - Greater than operator '>'. Example: 'x > y'

              - Greater than or equal operator '>='. Example: 'x >= y'

              - Less than operator '<'. Example: 'x < y'

              - Less than or equal operator '<='. Example: 'x <= y'

              - Logical AND operator 'and'. Example: 'x and y'

              - Logical OR operator 'or'. Example: 'x or y'

              - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

              - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


              Valid asset properties that can be used in the filter:

              - AssetIdentifier: String representing the unique identifier of an asset.

              - SerialNumber: String representing the serial number of an asset.

              - ModelName: String representing the model name of an asset.

              - ModelNumber: Unsigned integer representing the model number of an asset.

              - VendorName: String representing the vendor name of an asset.

              - VendorNumber: Unsigned integer representing the vendor number of an asset.

              - AssetName: String representing the asset name.

              - FirmwareVersion: String representing the firmware version of an asset.

              - HardwareVersion: String representing the hardware version of an asset.

              - BusType: String enumeration representing the bus type of an asset. Possible values are: BUILT_IN_SYSTEM, PCI_PXI, USB, GPIB, VXI, SERIAL, TCP_IP, CRIO, SCXI, CDAQ, SWITCH_BLOCK, SCC, FIRE_WIRE, ACCESSORY, CAN, SWITCH_BLOCK_DEVICE.

              - IsNIAsset: Boolean flag specifying whether the asset is an NI asset or a third-party asset.

              - Keywords: Collection of string values representing asset metadata keywords. Example: 'Keywords=["keyword1", "keyword2"]'.

              - Properties: Collection of key-value pairs, each key-value pair representing an asset metadata property. Example: 'Properties=["key1":"value1", "key2":"value2"]'.

              - Location.MinionId: String representing the identifier of the minion in which the asset is located in.

              - Location.SystemName: String representing the name of the system that the asset is located in.

              - Location.SlotNumber: Unsigned integer representing the slot number the asset is located in.

              - Location.AssetState.SystemConnection: String enumeration representing the connection state of the system the asset is currently located in. Possible values are: APPROVED, DISCONNECTED, CONNECTED_UPDATE_PENDING, CONNECTED_UPDATE_SUCCESSFUL, CONNECTED_UPDATE_FAILED, UNSUPPORTED, ACTIVATED.

              - Location.AssetState.AssetPresence: String enumeration representing the present status of an asset in a system. Possible values are: INITIALIZING, UNKNOWN, NOT_PRESENT, PRESENT.

              - SupportsSelfCalibration: Boolean flag specifying whether the asset supports self-calibration.

              - SelfCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was self-calibrated. Example: "2018-05-20T00:00:00Z"
              
              - SupportsExternalCalibration: Boolean flag specifying whether the asset supports external calibration.

              - CustomCalibrationInterval: Integer representing the custom calibration interval, in months.
              
              - CalibrationStatus: String enumeration representing the calibration status of an asset. Possible values are: OK, APPROACHING_RECOMMENDED_DUE_DATE, PAST_RECOMMENDED_DUE_DATE.

              - ExternalCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was externally-calibrated. Example: "2018-05-20T00:00:00Z"

              - ExternalCalibration.NextRecommendedDate: ISO-8601 formatted timestamp string specifying the recommended date for the next external calibration. Example: "2018-05-20T00:00:00Z"

              - ExternalCalibration.RecommendedInterval: Integer representing the manufacturer-recommended calibration interval, in months.

              - ExternalCalibration.Comments: String representing any external calibration comments.

              - ExternalCalibration.IsLimited: Boolean flag specifying whether the last external calibration was a limited calibration.

              - ExternalCalibration.Operator.DisplayName: String representing the name of the operator which performed an external calibration on a third-party asset.
          type: string
          example: IsNIAsset = true
        utilizationIntervals:
          description: Multiple time intervals for which to retrieve asset utilization.
          type: array
          items:
            $ref: '#/definitions/UtilizationTimeIntervalModel'
  QuerySystemUtilizationRequest:
    in: body
    name: queryBody
    description: Request body consisting of filters for asset utilization, assets, and time intervals.
    schema:
      title: Query System Utilizations Request
      description: Object containing filters for asset utilization, assets, and time intervals.
      type: object
      required:
        - utilizationIntervals
      properties:
        utilizationFilter:
          description: >-
            The filter criteria for asset utilization. Consists of a string of queries composed using AND/OR operators.
            String values and date strings need to be enclosed in double quotes.
            Parenthesis can be used around filters to better define the order of operations.

            Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


            Operators:

            - Equals operator '='. Example: 'x = y'

            - Not equal operator '!='. Example: 'x != y'

            - Greater than operator '>'. Example: 'x > y'

            - Greater than or equal operator '>='. Example: 'x >= y'

            - Less than operator '<'. Example: 'x < y'

            - Less than or equal operator '<='. Example: 'x <= y'

            - Logical AND operator 'and'. Example: 'x and y'

            - Logical OR operator 'or'. Example: 'x or y'

            - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

            - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


            Valid asset utilization properties that can be used in the filter:

            - MinionId:  String representing the identifier of a minion in which an asset might be located in.

            - Category: String representing the utilization task category.

            - UserName: : String representing the name of the operator who utilized the asset.
          type: string
          example: Category = "Test"
        assetFilter:
          description: >-
              The filter criteria for assets. Consists of a string of queries composed using AND/OR operators.
              String values and date strings need to be enclosed in double quotes.
              Parenthesis can be used around filters to better define the order of operations.

              Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


              Operators:

              - Equals operator '='. Example: 'x = y'

              - Not equal operator '!='. Example: 'x != y'

              - Greater than operator '>'. Example: 'x > y'

              - Greater than or equal operator '>='. Example: 'x >= y'

              - Less than operator '<'. Example: 'x < y'

              - Less than or equal operator '<='. Example: 'x <= y'

              - Logical AND operator 'and'. Example: 'x and y'

              - Logical OR operator 'or'. Example: 'x or y'

              - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

              - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


              Valid asset properties that can be used in the filter:

              - AssetIdentifier: String representing the unique identifier of an asset.

              - SerialNumber: String representing the serial number of an asset.

              - ModelName: String representing the model name of an asset.

              - ModelNumber: Unsigned integer representing the model number of an asset.

              - VendorName: String representing the vendor name of an asset.

              - VendorNumber: Unsigned integer representing the vendor number of an asset.

              - AssetName: String representing the asset name.

              - FirmwareVersion: String representing the firmware version of an asset.

              - HardwareVersion: String representing the hardware version of an asset.

              - BusType: String enumeration representing the bus type of an asset. Possible values are: BUILT_IN_SYSTEM, PCI_PXI, USB, GPIB, VXI, SERIAL, TCP_IP, CRIO, SCXI, CDAQ, SWITCH_BLOCK, SCC, FIRE_WIRE, ACCESSORY, CAN, SWITCH_BLOCK_DEVICE.

              - IsNIAsset: Boolean flag specifying whether the asset is an NI asset or a third-party asset.

              - Keywords: Collection of string values representing asset metadata keywords. Example: 'Keywords=["keyword1", "keyword2"]'.

              - Properties: Collection of key-value pairs, each key-value pair representing an asset metadata property. Example: 'Properties=["key1":"value1", "key2":"value2"]'.

              - Location.MinionId: String representing the identifier of the minion in which the asset is located in.

              - Location.SystemName: String representing the name of the system that the asset is located in.

              - Location.SlotNumber: Unsigned integer representing the slot number the asset is located in.

              - Location.AssetState.SystemConnection: String enumeration representing the connection state of the system the asset is currently located in. Possible values are: APPROVED, DISCONNECTED, CONNECTED_UPDATE_PENDING, CONNECTED_UPDATE_SUCCESSFUL, CONNECTED_UPDATE_FAILED, UNSUPPORTED, ACTIVATED.

              - Location.AssetState.AssetPresence: String enumeration representing the present status of an asset in a system. Possible values are: INITIALIZING, UNKNOWN, NOT_PRESENT, PRESENT.

              - SupportsSelfCalibration: Boolean flag specifying whether the asset supports self-calibration.

              - SelfCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was self-calibrated. Example: "2018-05-20T00:00:00Z"
              
              - SupportsExternalCalibration: Boolean flag specifying whether the asset supports external calibration.

              - CustomCalibrationInterval: Integer representing the custom calibration interval, in months.
              
              - CalibrationStatus: String enumeration representing the calibration status of an asset. Possible values are: OK, APPROACHING_RECOMMENDED_DUE_DATE, PAST_RECOMMENDED_DUE_DATE.

              - ExternalCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was externally-calibrated. Example: "2018-05-20T00:00:00Z"

              - ExternalCalibration.NextRecommendedDate: ISO-8601 formatted timestamp string specifying the recommended date for the next external calibration. Example: "2018-05-20T00:00:00Z"

              - ExternalCalibration.RecommendedInterval: Integer representing the manufacturer-recommended calibration interval, in months.

              - ExternalCalibration.Comments: String representing any external calibration comments.

              - ExternalCalibration.IsLimited: Boolean flag specifying whether the last external calibration was a limited calibration.

              - ExternalCalibration.Operator.DisplayName: String representing the name of the operator which performed an external calibration on a third-party asset.
          type: string
          example: IsNIAsset = true
        utilizationIntervals:
          description: Multiple time intervals for which to retrieve system utilization.
          type: array
          items:
            $ref: '#/definitions/UtilizationTimeIntervalModel'
  QueryAssetUtilizationHistoryRequest:
    in: body
    name: queryBody
    description: Request body consisting of filters for asset utilization and assets, with ordering and continuation token support.
    schema:
      title: Query Asset Utilization History Request
      description: Object containing filters for asset utilization and assets. When continuation token is used, the orderBy parameter needs to be provided as well.
      type: object
      properties:
        utilizationFilter:
          description: >-
            The filter criteria for asset utilization. Consists of a string of queries composed using AND/OR operators.
            String values and date strings need to be enclosed in double quotes.
            Parenthesis can be used around filters to better define the order of operations.

            Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'

            Operators:

            - Equals operator '='. Example: 'x = y'

            - Not equal operator '!='. Example: 'x != y'

            - Greater than operator '>'. Example: 'x > y'

            - Greater than or equal operator '>='. Example: 'x >= y'

            - Less than operator '<'. Example: 'x < y'

            - Less than or equal operator '<='. Example: 'x <= y'

            - Logical AND operator 'and'. Example: 'x and y'

            - Logical OR operator 'or'. Example: 'x or y'

            - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

            - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'

            Valid asset utilization properties that can be used in the filter:

            - MinionId: String representing the identifier of a minion in which an asset might be located in.

            - Category: String representing the utilization task category.

            - UserName: String representing the name of the operator who utilized the asset.

            - TaskName: String representing the name of the task.

            - StartTimestamp:
                description: >-
                  A date time value which can be used to specify the start of an utilization.

                  This parameter is required to have the "ISO 8601" format in order to be considered valid.
                type: string
                format: date-time
                example: '2019-05-20T00:00:00Z'
            - EndTimestamp:
                description: >-
                  A date time value which can be used to specify the end of an utilization.

                  This parameter is required to have the "ISO 8601" format in order to be considered valid.
                type: string
                format: date-time
                example: '2019-05-20T00:00:00Z'
          type: string
          example: Category = "Test"
        assetFilter:
          description: >-
              The filter criteria for assets. Consists of a string of queries composed using AND/OR operators.
              String values and date strings need to be enclosed in double quotes.
              Parenthesis can be used around filters to better define the order of operations.

              Filter syntax: '[property name][operator][operand] and [property name][operator][operand]'


              Operators:

              - Equals operator '='. Example: 'x = y'

              - Not equal operator '!='. Example: 'x != y'

              - Greater than operator '>'. Example: 'x > y'

              - Greater than or equal operator '>='. Example: 'x >= y'

              - Less than operator '<'. Example: 'x < y'

              - Less than or equal operator '<='. Example: 'x <= y'

              - Logical AND operator 'and'. Example: 'x and y'

              - Logical OR operator 'or'. Example: 'x or y'

              - Contains operator '.Contains()', used to check whether a string contains another string. Example: 'x.Contains(y)'

              - Does not contain operator '!.Contains()', used to check whether a string does not contain another string. Example: '!x.Contains(y)'


              Valid asset properties that can be used in the filter:

              - AssetIdentifier: String representing the unique identifier of an asset.

              - SerialNumber: String representing the serial number of an asset.

              - ModelName: String representing the model name of an asset.

              - ModelNumber: Unsigned integer representing the model number of an asset.

              - VendorName: String representing the vendor name of an asset.

              - VendorNumber: Unsigned integer representing the vendor number of an asset.

              - AssetName: String representing the asset name.

              - FirmwareVersion: String representing the firmware version of an asset.

              - HardwareVersion: String representing the hardware version of an asset.

              - BusType: String enumeration representing the bus type of an asset. Possible values are: BUILT_IN_SYSTEM, PCI_PXI, USB, GPIB, VXI, SERIAL, TCP_IP, CRIO, SCXI, CDAQ, SWITCH_BLOCK, SCC, FIRE_WIRE, ACCESSORY, CAN, SWITCH_BLOCK_DEVICE.

              - IsNIAsset: Boolean flag specifying whether the asset is an NI asset or a third-party asset.

              - Keywords: Collection of string values representing asset metadata keywords. Example: 'Keywords=["keyword1", "keyword2"]'.

              - Properties: Collection of key-value pairs, each key-value pair representing an asset metadata property. Example: 'Properties=["key1":"value1", "key2":"value2"]'.

              - Location.MinionId: String representing the identifier of the minion in which the asset is located in.

              - Location.SystemName: String representing the name of the system that the asset is located in.

              - Location.SlotNumber: Unsigned integer representing the slot number the asset is located in.

              - Location.AssetState.SystemConnection: String enumeration representing the connection state of the system the asset is currently located in. Possible values are: APPROVED, DISCONNECTED, CONNECTED_UPDATE_PENDING, CONNECTED_UPDATE_SUCCESSFUL, CONNECTED_UPDATE_FAILED, UNSUPPORTED, ACTIVATED.

              - Location.AssetState.AssetPresence: String enumeration representing the present status of an asset in a system. Possible values are: INITIALIZING, UNKNOWN, NOT_PRESENT, PRESENT.

              - SupportsSelfCalibration: Boolean flag specifying whether the asset supports self-calibration.

              - SelfCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was self-calibrated. Example: "2018-05-20T00:00:00Z"

              - SupportsExternalCalibration: Boolean flag specifying whether the asset supports external calibration.

              - CustomCalibrationInterval: Integer representing the custom calibration interval, in months.
              
              - CalibrationStatus: String enumeration representing the calibration status of an asset. Possible values are: OK, APPROACHING_RECOMMENDED_DUE_DATE, PAST_RECOMMENDED_DUE_DATE.

              - ExternalCalibration.CalibrationDate: ISO-8601 formatted timestamp string specifying the last date the asset was externally-calibrated. Example: "2018-05-20T00:00:00Z"

              - ExternalCalibration.NextRecommendedDate: ISO-8601 formatted timestamp string specifying the recommended date for the next external calibration. Example: "2018-05-20T00:00:00Z"

              - ExternalCalibration.RecommendedInterval: Integer representing the manufacturer-recommended calibration interval, in months.

              - ExternalCalibration.Comments: String representing any external calibration comments.

              - ExternalCalibration.IsLimited: Boolean flag specifying whether the last external calibration was a limited calibration.

              - ExternalCalibration.Operator.DisplayName: String representing the name of the operator which performed an external calibration on a third-party asset.
          type: string
          example: IsSystemController = true
        continuationToken:
          description: >-
            A token which allows the user to resume a query at the next item in
            the matching asset utilization history set. When querying for asset utilization history, a token will
            be returned if a query may be continued. To obtain the next page of
            asset utilization history records, pass the token to the service on a subsequent request.

          type: string
          example: token
        take:
          description: The maximum number of asset utilization history records to return.
          type: integer
          format: int32
          default: 1000
          minimum: 0
          example: 1000
        orderBy:
          $ref: '#/definitions/UtilizationHistoryField'
        orderByDescending:
          description: Whether to return the asset utilization history records in descending order.
          type: boolean
          default: false
          example: false
  StartUtilizationRequest:
    in: body
    name: utilizationBody
    description: Request body specifying utilization start information for multiple assets.
    schema:
      title: Start Utilization Request
      description: Object containing utilization unique identifier, the asset identifiers of the utilized assets and the details of the utilization type, such as category, task name and utilization start timestamp.
      type: object
      required:
        - utilizationIdentifier
        - minionId
        - assetIdentifications
        - utilizationCategory
        - utilizationTimestamp
      properties:
        utilizationIdentifier:
          description: String representing the unique identifier of an asset utilization history record.
          type: string
          example: "2916201B245D642430"
        minionId:
          description: Identifier of the minion where the utilized assets are located.
          type: string
          example: NI_PXIe-8135_Embedded_Controller--MAC-00-80-2F-23-52-65
        assetIdentifications:
          description: Array of the identification information for the assets which are utilized.
          type: array
          items:
            $ref: '#/definitions/AssetIdentificationModel'
        utilizationCategory: 
          description: String representing the utilization category.
          type: string
          example: Test
        taskName:
          description: String representing the name of the task.
          type: string
          example: DUTTestingRoutine
        userName:
          description: String representing the name of the operator who utilized the asset.
          type: string
          example: johnDoe
        utilizationTimestamp:
          description: >-
            A date time value which can be used to specify the start of an utilization.

            This parameter must have the "ISO 8601" format in order to be considered valid.
          type: string
          format: date-time
          example: '2019-05-01T00:00:00.519Z'
  EndUtilizationRequest:
    in: body
    name: utilizationBody
    description: Request body consisting of data specifying the utilization end event for an asset.
    schema:
      $ref: '#/definitions/UtilizationIdentifiersWithTimestampModel'
  HeartbeatUtilizationRequest:
    in: body
    name: utilizationBody
    description: Request body consisting of data specifying the utilization heartbeat event for multiple ongoing utilizations.
    schema:
      $ref: '#/definitions/UtilizationIdentifiersWithTimestampModel'
responses:
  Error:
    description: Error
    schema:
      title: Error Response
      description: Error Response.
      type: object
      properties:
        error:
          $ref: '#/definitions/Error'
  BadRequest:
    description: Bad Request indicates that the server was unable to process the request because of invalid syntax.
    schema:
      title: Bad Request Error Response
      description: Bad request error response containing error information.
      type: object
      properties:
        error:
          $ref: '#/definitions/Error'
  NotFound:
    description: The requested resource was not found.
    schema:
      title: Not Found Request Error Response
      description: Not found error response containing error information.
      type: object
      properties:
        error:
          $ref: '#/definitions/Error'
      example:
        error:
          name: AssetPerformanceManagement.NonExistingAssetWithIdentifier
          code: -253426
          message: >-
            No asset found with the specified identifier: 29162;01B245D6;4243;0.
          args: [29162;01B245D6;4243;0]
          innerErrors: []
  Unauthorized:
    description: Not authorized
    headers:
      WWW_Authenticate:
        description: Information for how to authenticate
        type: string
  AssetsResponse:
    description: Assets Response containing the assets satisfying the query and the total count of matching assets.
    schema:
      title: Assets Response
      description: Assets Response containing the assets satisfying the query and the total count of matching assets.
      type: object
      required:
        - assets
        - totalCount
      properties:
        assets:
          description: Array of assets
          type: array
          items:
            $ref: '#/definitions/AssetModel'
        totalCount:
            description: The total number of Assets which match the query.
            type: integer
            example: 1
  AssetDetailsResponse:
    description: Asset details response containing a single asset with the requested identifier.
    schema:
      $ref: '#/definitions/AssetModel'
  AssetSummaryResponse:
    description: Asset summary response containing the count of active assets, inactive assets and the total number of assets.
    schema:
      title: Asset Summary Response
      description: Response containing the total number of assets, the number of assets which are active (present in a connected system), and the number of assets which are not active. Also returns the number of assets that are in use and the number of assets that are not in use.
      type: object
      properties:
        active:
          description: Number of assets which are active, i.e. present in a connected system.
          type: integer
          example: 12
        notActive:
          description: Number of assets which are not active.
          type: integer
          example: 5
        total:
          description: Total number of managed assets.
          type: integer
          example: 17
        inUse:
          description: Total number of used assets.
          type: integer
          example: 10
        notInUse:
          description: Total number of unused assets.
          type: integer
          example: 7
        withAlarms:
          description: Total number of assets with associated alarms.
          type: integer
          example: 3
        approachingRecommendedDueDate:
          description: Number of assets approaching calibration date.
          type: integer
          example: 3
        pastRecommendedDueDate:
          description: Number of assets past their calibration date.
          type: integer
          example: 4
        totalCalibrated:
          description: Total number of assets supporting calibration.
          type: integer
          example: 7
  DeleteAssetsResponse:
    description: Delete Assets Response containing the IDs of the assets which were deleted, the IDs of the assets which failed to be deleted and any errors encountered.
    schema:
      title: Delete Assets Response
      description: Delete Assets Response containing the IDs of the assets which were deleted, the IDs of the assets which failed to be deleted and any errors encountered.
      type: object
      required:
        - ids
      properties:
        ids:
          description: Array of asset identifiers which were deleted
          type: array
          items:
            type: string
            example: "29162;01B245D6;4243;0"
        failed:
          description: Array of asset identifiers that failed to delete
          type: array
          items:
            type: string
            example: "13562;01B245D6;4243;0"
        error:
          $ref: '#/definitions/Error'
  AvailabilityInSystemResponse:
    description: >-
      Returns asset availability information in the specified timespan split based on the specified timespan granularity.
      The response contains a collection of systems that an asset has been present during the timespan, along with the percentage of time the asset was present in the system in each timespan.
    schema:
      title: Asset Availability
      description: The response contains a collection of systems that an asset has been present during the timespan, along with the percentage of time the asset was present in the system in each timespan.
      type: array
      items:
        title: Availability in System Model
        type: object
        properties:
          systemName:
            description: Hostname of the system in which the asset was located.
            type: string
            example: APM-PXI1
          availabilityData:
            description: Collection of asset availability data consisting of timespans and percentage of time the asset was available in each timespan.
            type: array
            items:
              $ref: '#/definitions/OverallAvailabilityInSystemModel'
  CalibratedAssetSummaryResponse:
    description: Response containing summary of assets supporting calibration. Contains the count of assets approaching recommended calibration due date, assets past recommended calibration due date and count of assets supporting (any type of) calibration.
    schema:
      title: Calibrated Asset Summary Response
      description: Asset summary of the total number of assets supporting calibration, the number of assets approaching recommended calibration date and the number of assets past their recommended calibration date.
      type: object
      properties:
        approachingRecommendedDueDate:
          description: Number of assets approaching calibration date.
          type: integer
          example: 12
        pastRecommendedDueDate:
          description: Number of assets past their calibration date.
          type: integer
          example: 5
        total:
          description: Total number of assets supporting calibration.
          type: integer
          example: 17
  CalibrationHistoryResponse:
    description: Calibration history response for a single asset with the requested identifier.
    schema:
      title: Calibration History Response
      description: Calibration history response containing all calibration history entries for the requested asset.
      type: object
      required:
        - calibrationHistory
        - totalCount
      properties:
        calibrationHistory:
          description: Array of calibration history entries
          type: array
          items:
            $ref: '#/definitions/CalibrationHistoryModel'
        totalCount:
          description: The total number of calibration history entries for the requested asset.
          type: integer
          example: 1
  DeleteCalibrationsPartialSuccessResponse:
    description: Delete Calibrations Partial Success Response
    schema:
      description: Delete Calibrations Partial Success Response
      title: DeleteCalibrationsPartialSuccessResponse
      type: object
      required:
        - calibrationIds
      properties:
        calibrationIds:
          description: Array of calibration entry identifiers that were deleted
          type: array
          items:
            type: string
            example: "5c4f0834174ae321b8a95a03"
        failed:
          description: Array of calibration entry identifiers that failed to delete
          type: array
          items:
            type: string
            example: "5c4f0834174ae321b8a95a03"
        error:
          $ref: '#/definitions/Error'
  CreateAssetsPartialSuccessResponse:
    description: Create Assets Partial Success Response
    schema:
      title: CreateAssetsPartialSuccessResponse
      description: Create Assets Partial Success Response
      type: object
      properties:
        assets:
          description: Array of created assets
          type: array
          items:
            $ref: '#/definitions/AssetModel'
        failed:
          description: Array of assets create requests that failed
          type: array
          items:
            $ref: '#/definitions/AssetCreateModel'
        error:
          $ref: '#/definitions/Error'
  SendToFileIngestionOrDownloadResponse:
    description: Response for the query operation that consists either in the file information for when the result was sent to the file ingestion service or the report file content for download. In the latter case, the name of the file is provided in the header of the response with key='Filename'.
    schema:
      title: Send to File Ingestion Or Download Response
      description: Response for the query that consists in the file information for when the result was sent to the file ingestion service or the CSV file content for download.
      type: object
      required:
        - fileId
      properties:
        fileId:
          description: File identifier in the file ingestion service
          type: string
          example: "5c6be9dc174ae3305ca4e7e1"
  ServicePolicyResponse:
    description: Service policy response containing the service calibration policy with the number of days for an asset to be considered as approaching calibration.
    schema:
      $ref: '#/definitions/ServicePolicyModel'
  UpdateAssetsPartialSuccessResponse:
    description: Update Assets Partial Success Response
    schema:
      title: UpdateAssetsPartialSuccessResponse
      description: Update Assets Partial Success Response
      type: object
      properties:
        assets:
          description: Array of updated assets
          type: array
          items:
            $ref: '#/definitions/AssetModel'
        failed:
          description: Array of assets update requests that failed
          type: array
          items:
            $ref: '#/definitions/AssetUpdateModel'
        error:
          $ref: '#/definitions/Error'
  UpdateAssetMetadataPartialSuccessResponse:
    description: Update Asset Metadata Partial Success Response
    schema:
      description: Update Asset Metadata Partial Success Response
      title: UpdateAssetMetadataPartialSuccessResponse
      type: object
      required:
        - succeeded
      properties:
        succeeded:
          $ref: '#/definitions/AssetMetadata'
        failed:
          $ref: '#/definitions/AssetMetadata'
        error:
          $ref: '#/definitions/Error'
      example:
        succeeded:
          keywords: [ Keyword1 ]
          properties:
            Key1: Value1
        failed:
          keywords: [ BadKeyword1 ]
          properties:
            BadKey1: BadValue1
        error:
          name: Skyline.OneOrMoreErrorsOccurred
          code: -251040
          message: >-
            One or more errors occurred. See the contained list for details of each
            error.
          args: []
          innerErrors:
            - name: AssetPerformanceManagement.InvalidKeywordInUpdateMetadataRequest
              code: -253435
              resourceType: Asset
              resourceId: BadKeyword1
              message: 'Invalid keyword value: BadKeyword1.'
              args: [BadKeyword1]
  LinkFilesPartialSuccessResponse:
    description: Link Files Partial Success Response
    schema:
      description: Link Files Partial Success Response
      title: LinkFilesPartialSuccessResponse
      type: object
      required:
        - succeeded
      properties:
        succeeded:
          description: File IDs that are valid.
          type: array
          items:
            type: string
            example: 607fffe41e4564dda3593eb0
        failed:
          description: File IDs that are not valid.
          type: array
          items:
            type: string
            example: invalid
        error:
          $ref: '#/definitions/Error'
      example:
        succeeded: [ 607fffe41e4564dda3593eb0 ]
        failed: [ invalidId ]
        error:
          name: Skyline.OneOrMoreErrorsOccurred
          code: -251040
          message: >-
            One or more errors occurred. See the contained list for details of each
            error.
          args: []
          innerErrors:
            - name: AssetPerformanceManagement.InvalidFileId
              code: -254806
              resourceType: Asset
              resourceId: invalidId
              message: 'The operation failed because an invalid file id was given: invalidId.'
              args: [invalidId]
  UtilizationWithPercentageResponse:
    description: Utilization response containing the collection of utilizations matching the provided filters, in a specific time interval. Besides a time interval, each element contains an asset identifier, a minion id, an utilization category, and a percentage of time that the asset was utilized in the time interval.
    schema:
      title: Utilization with Percentage Response
      description: Response for the utilization query containing the collection of utilizations. Besides a time interval, each element contains an asset identifier, a minion id, an utilization category, and a percentage of time that the asset was utilized in the time interval.
      type: array
      items:
          title: Utilization with Percentage Model
          type: object
          required:
            - startTimestamp
            - endTimestamp
            - assetIdentifier
            - percentage
          properties:
            startTimestamp:
              description: >-
                A date time value representing the beginning of an asset utilization interval.

                This parameter has the "ISO 8601" format in order to be considered valid.
              type: string
              format: date-time
              example: '2019-05-01T00:00:00.519Z'
            endTimestamp:
              description: >-
                A date time value representing the end of an asset utilization interval.

                This parameter has the "ISO 8601" format in order to be considered valid.
              type: string
              format: date-time
              example: '2019-05-20T00:00:00Z'
            assetIdentifier:
              description: String representing the unique identifier of an asset.
              type: string
              example: "29162;01B245D6;4243;0"
            assetName:
              description: String representing the name of an asset.
              type: string
              example: PCISlot2
            minionId:
              description: Identifier of the minion where the asset is located.
              type: string
              example: NI_PXIe-8135_Embedded_Controller--MAC-00-80-2F-23-52-65
            category:
              description: String representing the utilization task category.
              type: string
              example: Test
            percentage:
              description: Percentage of time that the asset was utilized in the specified time interval.
              type: number
              format: double
              example: 7.38958
  SystemUtilizationWithPercentageResponse:
    description: Utilization response containing the collection of utilizations matching the provided filters, in a specific time interval. Besides a time interval, each element contains an asset identifier, a minion id, an utilization category, and a percentage of time that the system was utilized in the time interval.
    schema:
      title: System Utilization with Percentage Response
      description: Response for the utilization query containing the collection of utilizations. Besides a time interval, each element contains an asset identifier, a minion id, an utilization category, and a percentage of time that the system was utilized in the time interval.
      type: array
      items:
          title: System Utilization with Percentage Model
          type: object
          required:
            - startTimestamp
            - endTimestamp
            - minionId
            - percentage
          properties:
            startTimestamp:
              description: >-
                A date time value representing the beginning of a system utilization interval.

                This parameter has the "ISO 8601" format in order to be considered valid.
              type: string
              format: date-time
              example: '2019-05-01T00:00:00.519Z'
            endTimestamp:
              description: >-
                A date time value representing the end of a system utilization interval.

                This parameter has the "ISO 8601" format in order to be considered valid.
              type: string
              format: date-time
              example: '2019-05-20T00:00:00Z'
            minionId:
              description: String representing the unique identifier of a system.
              type: string
              example: NI_PXIe-8135_Embedded_Controller--MAC-00-80-2F-23-52-65
            systemName:
              description: String representing the alias of a system.
              type: string
              example: PXIe Alias
            category:
              description: String representing the utilization task category.
              type: string
              example: Test
            percentage:
              description: Percentage of time that the system was utilized in the specified time interval.
              type: number
              format: double
              example: 7.38958
  QueryUtilizationHistoryResponse:
    description: Asset Utilization History response containing the collection of utilizations records matching the provided filters.
    schema:
      title: Asset Utilization History Response
      description: Response for the asset utilization history query containing the collection of utilizations as well as a continuation token and a total count.
      required:
       - assetUtilizations
      type: object
      properties:
        assetUtilizations:
          description: Array of asset utilizations
          type: array
          items:
              type: object
              required:
                - utilizationIdentifier
                - assetIdentifier
                - minionId
                - category
                - startTimestamp
              properties:
                utilizationIdentifier:
                  description: String representing the unique identifier of an asset utilization history record.
                  type: string
                  example: "2916201B245D642430"
                assetIdentifier:
                  description: String representing the unique identifier of an asset.
                  type: string
                  example: "29162;01B245D6;4243;0"
                minionId:
                  description: Identifier of the minion where the asset is located.
                  type: string
                  example: NI_PXIe-8135_Embedded_Controller--MAC-00-80-2F-23-52-65
                category:
                  description: String representing the utilization task category.
                  type: string
                  example: Test
                taskName:
                  description: String representing the name of the task.
                  type: string
                  example: DUTTestingRoutine
                userName:
                  description: String representing the name of the operator who utilized the asset.
                  type: string
                  example: johnDoe
                startTimestamp:
                  description: >-
                    A date time value which can be used to specify the start of an utilization.

                    This parameter has the "ISO 8601" format in order to be considered valid.
                  type: string
                  format: date-time
                  example: '2019-05-01T00:00:00.519Z'
                endTimestamp:
                  description: >-
                    A date time value which can be used to specify the end of an utilization.

                    This parameter has the "ISO 8601" format in order to be considered valid.
                  type: string
                  format: date-time
                  example: '2019-05-20T00:00:00Z'
                heartbeatTimestamp:
                  description: >-
                    A date time value which can be used to specify the heartbeat of an utilization.

                    This parameter has the "ISO 8601" format in order to be considered valid.
                  type: string
                  format: date-time
                  example: '2019-05-20T00:00:00Z'
        continuationToken:
          description: >-
            A token which allows the user to resume a query at the next item in
            the matching asset utilization history set. When querying for asset utilization history, a token will
            be returned if a query may be continued. To obtain the next page of
            asset utilization history records, pass the token to the service on a subsequent request.

          type: string
          example: token
  UpdateUtilizationPartialSuccessResponse:
    description: Update utilization partial success response. The update operation can be either a heartbeat update or a utilization end.
    schema:
      description: Update utilization partial success response.
      title: UpdateUtilizationPartialSuccessResponse
      type: object
      required:
        - updatedUtilizationIds
      properties:
        updatedUtilizationIds:
          description: Array of utilization identifiers for the entries that were updated.
          type: array
          items:
            type: string
            example: "5c4f0834174ae321b8a95a03"
        failed:
          description: Array of utilization identifiers for the entries that failed to update.
          type: array
          items:
            type: string
            example: "5c4f0834174ae321b8a95a04"
        error:
          $ref: '#/definitions/Error'
  StartUtilizationPartialSuccessResponse:
    description: Start utilization partial success response.
    schema:
      description: Start utilization partial success response.
      title: StartUtilizationPartialSuccessResponse
      type: object
      required:
        - assetsWithStartedUtilization
      properties:
        assetsWithStartedUtilization:
          description: Array containing the asset identification data for the assets that started being utilized.
          type: array
          items:
            $ref: '#/definitions/AssetIdentificationModel'
        failed:
          description: Array containing the asset identification data for the assets that failed to start being utilized.
          type: array
          items:
            $ref: '#/definitions/AssetIdentificationModel'
        error:
          $ref: '#/definitions/Error'
paths:
  /:
    get:
      tags: [versioning]
      summary: API information
      description: Returns information about API versions and available operations.
      operationId: RootEndpoint
      # Explicitly mark security as an empty array - this route does not require any privileges.
      # Marking it this way prevents it from inheriting the top-level security settings.
      security: []
      responses:
        200:
          description: OK
          schema:
            title: Root Endpoint Response
            description: Version Information.
            type: object
            properties:
              v1:
                $ref: '#/definitions/V1Operations'
              version:
                description: Implementation version of the web service.
                type: string
        default:
          $ref: '#/responses/Error'
  /v1:
    get:
      tags: [versioning]
      summary: API version information
      description: Returns available operations for a single version of the API.
      operationId: RootEndpointWithVersion
      security: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/V1Operations'
        default:
          $ref: '#/responses/Error'
  /v1/assets:
    get:
      tags: [assets]
      summary: Gets assets
      description: >-
        Gets a list of assets. Calibrated assets can be obtained by setting calibratableOnly=true. To obtain a report of the assets, responseFormat=csv&destination=download should be sent as query parameters.


        Currently, the valid combinations of ResponseFormat and Destination are [JSON;INLINE], [CSV;DOWNLOAD], [CSV;FILE_SERVICE].
      operationId: get-assets
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/Skip'
        - $ref: '#/parameters/Take'
        - in: query
          name: calibratableOnly
          description: Whether to filter only assets which support calibration.
          type: boolean
        - in: query
          name: responseFormat
          description: The return type. Valid options are "JSON" and "CSV".
          type: string
          enum:
            - JSON
            - CSV
        - in: query
          name: destination
          description:
            The destination of the request.
            "INLINE" (default) returns the list of assets as the body of the response.
            "DOWNLOAD" returns the list of assets as the body of the response and indicates to the client that it should be downloaded as a file.
            "FILE_SERVICE" sends the list of assets to the file ingestion service and returns the ID of the file to the client in a JSON object.
          type: string
          enum:
            - INLINE
            - DOWNLOAD
            - FILE_SERVICE
        - in: query
          name: fileIngestionWorkspace
          description: The ID of the workspace to put the file into, if the destination is "FILE_SERVICE".
          type: string
          x-example: '5bc5e9092a4fa4c71cfa7197'
      responses:
        200:
          $ref: '#/responses/AssetsResponse'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
    post:
      tags: [assets]
      summary: Creates assets
      description: >-
        Creates new assets with the provided information. 
        
        
        If an asset with the provided identification does not exist on the server, a new asset is created. If an asset with the provided identification already exists on the server, no create or update operation will be performed for the respective identification and the final response will contain an error message describing the actual reason.
        
        
        If the selfCalibration property is set, the supportsSelfCalibration property is automatically set to true by the service no matter if it is specified as false. The same is true for the externalCalibration and supportsExternalCalibration properties.
      operationId: create-assets
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/CreateAssetsRequestBody'
      responses:
        200:
          $ref: '#/responses/CreateAssetsPartialSuccessResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/update-assets:
    post:
      tags: [assets]
      summary: Updates multiple assets
      description: >-
        Updates multiple assets. To identify the assets that need to be updated, the following properties must be provided:

        - id

        OR

        - asset identification properties. See AssetIdentificationModel for details.
        
        If an asset with the provided identification does not exist, that asset is not created and an error is returned instead.
        Any property that is not set or set to null is ignored.

        The properties that cannot be updated are:

        - busType

        - modelName

        - modelNumber

        - vendorName

        - vendorNumber

        - serialNumber

        - id


        If the selfCalibration property is set, the supportsSelfCalibration property is automatically set to true by the service, no matter if it is specified as false. The same is true for the externalCalibration and supportsExternalCalibration properties.


        Updating the assetPresence property to NOT_PRESENT succeeds only if it is updated with the same minionId, parent and slotNumber. Updating it to PRESENT always succeeds.
      operationId: update-assets
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/UpdateAssetsRequestBody'
      responses:
        200:
          $ref: '#/responses/UpdateAssetsPartialSuccessResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/asset-summary:
    get:
      tags: [assets]
      summary: Gets a summary of assets
      description: Gets asset summary response containing the total number of assets, the number of assets which are active, i.e. present in a connected system, and the number of assets which are not active.
      operationId: get-asset-summary
      x-ni-auth: true
      responses:
          200:
            $ref: '#/responses/AssetSummaryResponse'
          401:
            $ref: '#/responses/Unauthorized'
          default:
            $ref: '#/responses/Error'
  /v1/calibratable-asset-summary:
    get:
      tags: [assets]
      summary: Gets a summary of assets supporting calibration
      description: Gets asset summary of the total number of assets supporting calibration, the number of assets approaching calibration date and the number of assets past their calibration date
      operationId: get-calibratable-asset-summary
      x-ni-auth: true
      responses:
          200:
            $ref: '#/responses/CalibratedAssetSummaryResponse'
          401:
            $ref: '#/responses/Unauthorized'
          default:
            $ref: '#/responses/Error'
  /v1/query-assets:
    post:
      tags: [assets]
      summary: Query assets
      description: Returns the assets satisfying the provided filtering criteria. If the the caller requests a JSON inline response, the returned assets are filtered based on the filter string and the IDs and calibratableOnly properties are not taken into consideration. When the caller requests a CSV response, the filter is not taken into consideration, but the IDs and calibratableOnly properties are used to filter the assets from the response.
      operationId: query-assets
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/QueryAssetsRequest'
      responses:
        200:
          $ref: '#/responses/AssetsResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/query-in-use-assets:
    post:
      tags: [assets]
      summary: Query assets that are currently in use
      description: Returns the assets that are currently marked as being in use by a utilization entry and that satisfy the provided filtering criteria. The caller can filter based on asset properties as well as utilization properties.
      operationId: query-in-use-assets
      x-ni-auth: true
      parameters: 
        - $ref: '#/parameters/QueryInUseAssetsRequest'
      responses:
        200:
          $ref: '#/responses/AssetsResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}:
    get:
      tags: [assets]
      summary: Gets asset with identifier
      description: Gets the asset which has the given identifier.
      operationId: get-asset-with-identifier
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetId'
      responses:
        200:
          $ref: '#/responses/AssetDetailsResponse'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/history/availability:
    get:
      tags: [assets]
      summary: Retrieves asset availability history
      description: Returns availability information for an asset in the specified timespan and split based on the specified time granularity.
      operationId: get-asset-availability-history
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetId'
        - in: query
          name: startDate
          required: true
          description: >-
            A date value which can be used to specify the beginning of a timespan. 
            
            This parameter is required to have the "ISO 8601" format in order to be considered valid. 
            
            The time component of the request is ignored.
          type: string
          x-example: '2018-05-01T00:00:00.000Z'
        - in: query
          name: endDate
          required: true
          description: >- 
            A date value which can be used to specify the end of a timespan.
            
            This parameter is required to have the "ISO 8601" format in order to be considered valid. 
            
            The time component of the request is ignored.
          type: string
          x-example: '2018-05-20T00:00:00Z'
        - $ref: '#/parameters/TimespanGranularity'
      responses:
        200:
          $ref: '#/responses/AvailabilityInSystemResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/history/calibration:
    get:
      tags: [assets]
      summary: Retrieves asset calibration history
      description: Returns the calibration history of the asset which has the given identifier.
      operationId: get-asset-calibration-history
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/Skip'
        - $ref: '#/parameters/Take'
      responses:
        200:
          $ref: '#/responses/CalibrationHistoryResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
    post:
      tags: [deprecated]
      summary: Creates a new calibration history entry for an asset
      description: Deprecated. Creates a new calibration history entry for an asset. Use /v1/update-assets.
      operationId: post-asset-calibration-history
      x-ni-auth: true
      x-ni-request-variables: [REMOTE_USER, USER_NAME]
      deprecated: true
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/ExternalCalibrationRequestBody'
      responses:
        201:
          description: Created
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/history/delete-calibrations:
    post:
      tags: [assets]
      summary: Deletes calibration history entries
      description: Deletes multiple calibration history entries for an asset.
      operationId: post-delete-asset-calibration-history
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/DeleteCalibrationsRequestBody'
      responses:
        200:
          $ref: '#/responses/DeleteCalibrationsPartialSuccessResponse'
        204:
          description: No Content
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/history/query-calibration:
    post:
      tags: [assets]
      summary: Queries asset calibration history
      description: Computes the calibration history of an asset in CSV format. If the destination is download, the response will contain the calibration history file content. If the destination is file ingestion service, the CSV file is sent to the file storing service and an object containing the file identifier is returned. Any other format and destination combinations are not supported yet.
      operationId: post-asset-query-calibration-history
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/QueryHistoryRequestBody'
      responses:
        200:
          $ref: '#/responses/SendToFileIngestionOrDownloadResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          description: Internal server error. Possible while sending the file to the FileIngestion service because the service is not running; there is not enough space on disk to store the file; or there are network issues.
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/history/query-location:
    post:
      tags: [assets]
      summary: Queries asset location history
      description: Computes the location history of an asset in CSV format. If the destination is download, the response will contain the location history file content. If the destination is file ingestion service, the CSV file is sent to the file storing service and an object containing the file identifier is returned. Any other format and destination combinations are not supported yet.
      operationId: post-asset-query-location-history
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/QueryHistoryRequestBody'
      responses:
        200:
          $ref: '#/responses/SendToFileIngestionOrDownloadResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          description: Internal server error. Possible while sending the file to the FileIngestion service, because the service is not running or there is not enough space on disk to store the file or the file could not be sent due to networking issues.
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/metadata:
    patch:
      tags: [assets]
      summary: Updates asset metadata
      description: Performs a request to update the metadata information of an asset.
      operationId: update-asset-metadata
      x-ni-auth: true
      consumes:
        - application/merge-patch+json
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/UpdateMetadata'
      responses:
        200:
          $ref: '#/responses/UpdateAssetMetadataPartialSuccessResponse'
        204:
          description: No Content
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/file:
    post:
      tags: [assets]
      summary: Link files
      description: Performs a request to link files to an asset.
      operationId: link-files
      x-ni-auth: true
      consumes:
        - application/merge-patch+json
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/LinkFiles'
      responses:
        200:
          $ref: '#/responses/LinkFilesPartialSuccessResponse'
        204:
          description: No Content
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/{assetId}/files/{fileId}:
    delete:
      tags: [assets]
      summary: Unlink files
      description: Performs a request to unlink a file from an asset.
      operationId: unlink-files
      x-ni-auth: true
      consumes:
        - application/merge-patch+json
      parameters:
        - $ref: '#/parameters/AssetId'
        - $ref: '#/parameters/FileId'
      responses:
        204:
          description: No Content
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        default:
          $ref: '#/responses/Error'
  /v1/assets/start-utilization:
    post:
      tags: [utilization]
      summary: Stores assets utilization start
      description: >- 
          Stores information related to assets utilization start. The operation is successful when utilization information can be stored for all asset identifiers provided in the request.
          It will return a partial success when storing the utilization start information failed for one or more assets.
      operationId: start-multiple-asset-utilization
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/StartUtilizationRequest'
      responses:
        200:
          $ref: '#/responses/StartUtilizationPartialSuccessResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/assets/end-utilization:
    post:
      tags: [utilization]
      summary: Stores assets utilization end
      description: >-
          Stores information related to assets utilization end. The operation is successful and will return No Content when end utilization information can be stored for all utilization identifiers provided in the request.
          It will return a partial success when end utilization information can be stored for only a subset of the utilization identifiers provided in the request.
          It will return a not found response when no stored utilizations matched the provided utilization identifiers.
      operationId: end-multiple-asset-utilization
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/EndUtilizationRequest'
      responses:
        200:
          $ref: '#/responses/UpdateUtilizationPartialSuccessResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/assets/utilization-heartbeat:
    post:
      tags: [utilization]
      summary: Stores asset utilization heartbeats
      description: >-
          Stores information related to ongoing asset utilizations. The operation is successful and will return No Content when utilization heartbeat information can be stored for all utilization identifiers provided in the request.
          It will return a partial success when utilization heartbeat information can be stored for only a subset of the utilization identifiers provided in the request.
          It will return a not found response when no stored utilizations matched the provided utilization identifiers.
      operationId: asset-utilization-multiple-heartbeats
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/HeartbeatUtilizationRequest'
      responses:
        200:
          $ref: '#/responses/UpdateUtilizationPartialSuccessResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/compare-assets-availability:
    post:
      tags: [assets]
      summary: Gets availability history for multiple assets.
      description: Gets availability history for multiple assets based on a specified timespan.
      operationId: compare-asset-availability
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/AssetAvailabilityComparison'
      responses:
        200:
          description: Asset availability comparison response containing availability history for requested assets based on the requested timespan.
          schema:
            title: Asset Availability Comparison Response
            description: Asset availability comparison response containing availability history for the requested assets. If availability history could not be resolved for some assets, the response contains error information on the assets which could not be resolved.
            type: object
            properties:
              availabilityComparisons:
                type: array
                items:
                  $ref: '#/definitions/AssetWithAvailabilityHistoryModel'
              failed:
                description: Array of asset identifiers for which obtaining availability failed
                type: array
                items:
                  type: string
                  example: [ "13562;01B245D6;4243;0" ]
              error:
                $ref: '#/definitions/Error'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/assets/history/query-assets-availability:
    post:
      tags: [assets]
      summary: Gets availability history for multiple assets.
      description: Gets availability history for multiple assets based on the specified timespans.
      operationId: query-assets-availability
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/QueryAssetsAvailabilityRequestBody'
      responses:
        200:
          description: Query Assets Availability response containing information about the availability of the assets specified by their IDs during the given time intervals.
          schema:
            title: Query Assets Availability Response
            description: Query assets availability response containing availability history for the requested assets. If availability history could not be resolved for some assets, the response contains error information on the assets which could not be resolved.
            type: object
            properties:
              availabilityData:
                type: array
                items:
                  $ref: '#/definitions/AssetWithAvailabilityInIntervalModel'
              failed:
                description: Array of asset identifiers for which obtaining availability failed.
                type: array
                items:
                  type: string
                  example: [ "13562;01B245D6;4243;0" ]
              error:
                $ref: '#/definitions/Error'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/assets/history/report/query-assets-availability:
    post:
      tags: [reports]
      summary: Gets an asset availability history report for multiple assets.
      description: Gets a CSV file report conatining asset availability history for multiple assets based on the specified timespans.
      operationId: query-assets-availability-report
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/QueryAssetsAvailabilityReportRequestBody'
      responses:
        200:
          description: A CSV file report conatining the asset availability history of the assets specified by their IDs during the given time intervals.
          schema:
            type: file
            example: "Asset Id,Asset Name,Start Date,End Date,System Alias,Availability Percentage\n0030b58e-4e1a-47ea-9e1e-d60ba3341551,PXI3Slot7,2020-11-10 00:00:00Z,2021-01-06 00:00:00Z,NI_PXIe-8133_Embedded_Controller--MAC-00-80-2F-14-2C-06,0.0815299529054917"
          headers:
            X-Not-Found-Resources:
              description: The IDs of the resources that were not found.
              type: array
              items:
                type: string
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/delete-assets:
    post:
      tags: [assets]
      summary: Deletes assets and all information associated with assets.
      description: Deletes all persisted data for the assets with the provided identifiers. This includes asset properties and all related historical information.
      operationId: delete-assets
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/DeleteAssetsRequestBody'
      responses:
        200:
          $ref: '#/responses/DeleteAssetsResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/query-asset-utilization:
    post:
      tags: [utilization]
      summary: Query Asset Utilization
      description: Retrieves asset utilization matching the provided filters.
      operationId: read-asset-utilization
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/QueryAssetUtilizationRequest'
      responses:
        200:
          $ref: '#/responses/UtilizationWithPercentageResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/query-system-utilization:
    post:
      tags: [utilization]
      summary: Query System Utilization
      description: Retrieves system utilization matching the provided filters.
      operationId: read-system-utilization
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/QuerySystemUtilizationRequest'
      responses:
        200:
          $ref: '#/responses/SystemUtilizationWithPercentageResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/query-asset-utilization-history:
    post:
      tags: [utilization]
      summary: Query Asset Utilization Historical Data
      description: Retrieves historical asset utilization data matching the provided filters. An empty request body queries all historical asset utilization data.
      operationId: query-asset-utilizations
      x-ni-auth: true
      parameters:
        - $ref: '#/parameters/QueryAssetUtilizationHistoryRequest'
      responses:
        200:
          $ref: '#/responses/QueryUtilizationHistoryResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
  /v1/policy:
    get:
      tags: [policy]
      summary: Retrieves the service policy
      description: Retrieves the service policy.
      operationId: get-policy
      x-ni-auth: true
      responses:
        200:
          $ref: '#/responses/ServicePolicyResponse'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
    patch:
      tags: [policy]
      summary: Updates the service policy
      description: Performs a request to update the service policy.
      operationId: update-policy
      x-ni-auth: true
      consumes:
        - application/merge-patch+json
      parameters:
        - $ref: '#/parameters/ServicePolicyUpdateRequestBody'
      responses:
        204:
          description: No Content
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        default:
          $ref: '#/responses/Error'
